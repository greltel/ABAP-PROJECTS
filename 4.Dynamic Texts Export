************************************************************************
*   Program name: Z_DYNAMIC_TEXTS_EXPORT
*   Description :
*
*   Created   by: GDRAKOS DVALOUXIS
*
************************************************************************
REPORT z_dynamic_texts_export.

TABLES:stxh.

CLASS: lcx_texts DEFINITION DEFERRED,
       lcl_texts DEFINITION DEFERRED.

*&---------------------------------------------------------------------*
*& Class LCX_TEXTS DEFINITION
*&---------------------------------------------------------------------*
CLASS lcx_texts DEFINITION INHERITING FROM cx_static_check.

  PUBLIC SECTION.

    METHODS:
      constructor IMPORTING text TYPE string,
      get_text REDEFINITION.

  PRIVATE SECTION.

    DATA: local_text TYPE string.

ENDCLASS.

*&---------------------------------------------------------------------*
*& Class LCL_TEXTS DEFINITION
*&---------------------------------------------------------------------*
CLASS lcl_texts DEFINITION CREATE PUBLIC.

  PUBLIC SECTION.

    METHODS:

      get_data IMPORTING so_object TYPE STANDARD TABLE
                         so_tdname TYPE STANDARD TABLE
                         so_tdid   TYPE STANDARD TABLE
                         so_spras  TYPE STANDARD TABLE
               RAISING   lcx_texts,

      download_texts  IMPORTING im_filename               TYPE file_table-filename
                                im_field_labels_as_header TYPE abap_bool DEFAULT space
                      RAISING   lcx_texts.

  PRIVATE SECTION.

    TYPES:
      BEGIN OF t_texts,
        tdobject   TYPE tdobject,
        tdname     TYPE tdobname,
        tdid       TYPE tdid,
        tdspras    TYPE spras,
        tdtxtlines TYPE tdtxtlines,
        text       TYPE string,
      END OF t_texts,

      tt_texts TYPE STANDARD TABLE OF t_texts WITH DEFAULT KEY INITIAL SIZE 0.

    DATA:lt_texts TYPE tt_texts.

    METHODS:
      populate_texts.

ENDCLASS.

*&---------------------------------------------------------------------*
*& SELECTION SCREEN DESIGN
*&---------------------------------------------------------------------*

SELECTION-SCREEN: BEGIN OF BLOCK b0 WITH FRAME TITLE title0.
PARAMETERS : p_file TYPE file_table-filename OBLIGATORY.
SELECTION-SCREEN: END OF BLOCK b0.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE title1.

SELECT-OPTIONS: s_obj    FOR stxh-tdobject OBLIGATORY,
                s_tdname FOR stxh-tdname   OBLIGATORY,
                s_tdid   FOR stxh-tdid     OBLIGATORY,
                s_spras  FOR stxh-tdspras  OBLIGATORY.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE title2.
PARAMETERS:c_header AS CHECKBOX DEFAULT abap_true.
SELECTION-SCREEN END OF BLOCK b2.

SELECTION-SCREEN END OF BLOCK b1.

*&---------------------------------------------------------------------*
*& INITIALIZATION OF SELECTION SCREEN ELEMENTS
*&---------------------------------------------------------------------*
INITIALIZATION.
  PERFORM screen_initialization.

*&---------------------------------------------------------------------*
*& AT SELECTION SCREEN ON VALUE REQUESTS (F4)
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  PERFORM get_export_filepath CHANGING p_file.

*&---------------------------------------------------------------------*
*& EXECUTABLE CODE
*&---------------------------------------------------------------------*
START-OF-SELECTION.


  TRY.
      DATA(lo_texts) = NEW lcl_texts( ).

      lo_texts->get_data( so_object = s_obj[]
                          so_spras  = s_spras[]
                          so_tdid   = s_tdid[]
                          so_tdname = s_tdname[] ).

      lo_texts->download_texts( im_filename               = p_file
                                im_field_labels_as_header = c_header ).

    CATCH lcx_texts INTO DATA(lo_exception).
      MESSAGE lo_exception->get_text( ) TYPE cl_cms_common=>con_msg_typ_i DISPLAY LIKE cl_cms_common=>con_msg_typ_e.
  ENDTRY.

END-OF-SELECTION.

*&---------------------------------------------------------------------*
*& Form SCREEN INITIALIZATION
*&---------------------------------------------------------------------*
FORM screen_initialization.

  title0                   = 'Export Filepath'.
  title1                   = 'Texts Selection'.
  title2                   = 'Properties'.

  syst-title               = 'Texts Export'.
  %_p_file_%_app_%-text    = icon_xls         && 'Excel Filepath'.
  %_s_obj_%_app_%-text     = icon_object_list && 'Text Object'.
  %_s_tdname_%_app_%-text  = icon_text_field  && 'Text Name'.
  %_s_tdid_%_app_%-text    = icon_text_ina    && 'Text ID'.
  %_s_spras_%_app_%-text   = icon_eu          && 'Language'.
  %_c_header_%_app_%-text  = 'Field Labels as Header'.

ENDFORM.

FORM get_export_filepath CHANGING lp_file.

  DATA: filename    TYPE string,
        path        TYPE string,
        fullpath    TYPE string,
        user_action TYPE i.

  cl_gui_frontend_services=>file_save_dialog(
          EXPORTING
            window_title              = 'File System of Presentation Server'
            default_extension         = cl_gui_frontend_services=>filetype_excel
            prompt_on_overwrite       = abap_true
            default_file_name         = 'Exported_Texts.XLSX'
            file_filter               = 'All Files(*.*)|*.*|' && 'Excel Files (*.xlsx)|*.xlsx|' &&'Excel Files (*.xls)|*.xls|'
          CHANGING
            filename                  = filename
            path                      = path
            fullpath                  = fullpath
            user_action               = user_action
          EXCEPTIONS
            cntl_error                = 1
            error_no_gui              = 2
            not_supported_by_gui      = 3
            invalid_default_file_name = 4
            OTHERS                    = 5 ).

  lp_file = COND #( WHEN syst-subrc IS INITIAL AND user_action EQ cl_gui_frontend_services=>action_ok THEN fullpath ).

ENDFORM.

*&---------------------------------------------------------------------*
*& Class LCX_TEXTS IMPLEMENTATION
*&---------------------------------------------------------------------*
CLASS lcx_texts IMPLEMENTATION.

  METHOD constructor.

    super->constructor( textid = CONV #( text ) ).
    local_text = text.

  ENDMETHOD.

  METHOD get_text.

    result = me->local_text.

  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*& Class LCL_TEXTS IMPLEMENTATION
*&---------------------------------------------------------------------*
CLASS lcl_texts IMPLEMENTATION.

  METHOD get_data.

    CLEAR:me->lt_texts.
    SELECT FROM stxh
      FIELDS stxh~tdobject, stxh~tdname, stxh~tdid, stxh~tdspras, stxh~tdtxtlines
      WHERE tdobject IN  @so_object
        AND tdname   IN  @so_tdname
        AND tdid     IN  @so_tdid
        AND tdspras  IN  @so_spras
        INTO CORRESPONDING FIELDS OF TABLE @me->lt_texts.

    IF syst-subrc IS NOT INITIAL OR lt_texts IS INITIAL.
      RAISE EXCEPTION TYPE lcx_texts EXPORTING text = 'No Texts Found for the Specified Criteria'.
    ENDIF.

    me->populate_texts( ).

  ENDMETHOD.

  METHOD populate_texts.

    DATA:lt_lines TYPE TABLE OF  tline.

    LOOP AT me->lt_texts ASSIGNING FIELD-SYMBOL(<fs_line>).

      CLEAR:lt_lines.
      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          client                  = syst-mandt
          id                      = <fs_line>-tdid
          language                = <fs_line>-tdspras
          name                    = <fs_line>-tdname
          object                  = <fs_line>-tdobject
        TABLES
          lines                   = lt_lines
        EXCEPTIONS
          id                      = 1
          language                = 2
          name                    = 3
          not_found               = 4
          object                  = 5
          reference_check         = 6
          wrong_access_to_archive = 7
          OTHERS                  = 8.

      IF syst-subrc IS INITIAL AND lt_lines IS NOT INITIAL.

        CALL FUNCTION 'IDMX_DI_TLINE_INTO_STRING'
          EXPORTING
            it_tline       = lt_lines
          IMPORTING
            ev_text_string = <fs_line>-text.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD download_texts.

    DATA:lv_row    TYPE i VALUE 1,
         lv_column TYPE i VALUE 1.

    TRY.
        DATA(xlsx_handling)    = cl_ehfnd_xlsx=>get_instance( ).
        DATA(xlsx_document)    = xlsx_handling->create_doc( ).
        DATA(xlsx_sheets)      = xlsx_document->get_sheets( ).
        DATA(first_xlsx_sheet) = xlsx_document->get_sheet_by_id( xlsx_sheets[ 1 ]-sheet_id ).
      CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed INTO DATA(lo_exception).
        RAISE EXCEPTION TYPE lcx_texts EXPORTING text = lo_exception->get_text( ).
    ENDTRY.

    DATA(lo_struct_def) = CAST cl_abap_structdescr( CAST cl_abap_tabledescr( cl_abap_tabledescr=>describe_by_data( me->lt_texts ) )->get_table_line_type( ) ).
    DATA(lt_components) = lo_struct_def->components.

    "BUILD EXCEL HEADER LINE
    IF im_field_labels_as_header EQ abap_true.

      lv_row = 2.

      LOOP AT lt_components ASSIGNING FIELD-SYMBOL(<fs_components>).

        DATA(lo_element_def) = CAST cl_abap_elemdescr( lo_struct_def->get_component_type( <fs_components>-name ) ).

        IF lo_element_def->is_ddic_type( ) AND "Field is Dictionary Data Type
           lo_element_def->get_ddic_field( )-rollname IS NOT INITIAL.

          DATA(lv_field_data_element) = lo_element_def->get_ddic_field( )-rollname.

          SELECT SINGLE FROM  dd04t
                 FIELDS coalesce( scrtext_l, scrtext_m, scrtext_s, reptext )
                 WHERE rollname   EQ @lv_field_data_element AND
                       ddlanguage EQ @syst-langu
                 INTO  @DATA(lv_cell_value).

        ENDIF.

        first_xlsx_sheet->set_cell_content( iv_row    = 1
                                            iv_column = lv_column
                                            iv_value  = COND #( WHEN lv_cell_value IS INITIAL THEN <fs_components>-name
                                                                ELSE lv_cell_value ) ).
        lv_column += 1.

        CLEAR:lv_cell_value,lo_element_def,lv_field_data_element.

      ENDLOOP.

    ENDIF.

    TRY.
        "EXCEL ROWS
        CLEAR lv_column.
        LOOP AT me->lt_texts ASSIGNING FIELD-SYMBOL(<fs_table>).

          lv_column = 1.
          LOOP AT lt_components ASSIGNING <fs_components>.
            ASSIGN COMPONENT <fs_components>-name OF STRUCTURE <fs_table> TO FIELD-SYMBOL(<columnvalue>).
            IF <columnvalue> IS ASSIGNED.
              first_xlsx_sheet->set_cell_content( iv_row    = lv_row
                                                  iv_column = lv_column
                                                  iv_value  = <columnvalue> ).
            ENDIF.
            lv_column += 1.
          ENDLOOP.

          lv_row += 1.

        ENDLOOP.

        cl_scp_change_db=>xstr_to_xtab( EXPORTING im_xstring = xlsx_document->save( )
                                        IMPORTING ex_xtab    = DATA(filecontenttab) ).

        cl_gui_frontend_services=>gui_download(
              EXPORTING
                bin_filesize              = xstrlen( xlsx_document->save( ) )
                filename                  = |{ im_filename }|
                filetype                  = 'BIN'
                confirm_overwrite         = abap_true
              IMPORTING
                filelength                = DATA(bytestransferred)
              CHANGING
                data_tab                  = filecontenttab
              EXCEPTIONS
                file_write_error          = 1
                no_batch                  = 2
                gui_refuse_filetransfer   = 3
                invalid_type              = 4
                no_authority              = 5
                unknown_error             = 6
                header_not_allowed        = 7
                separator_not_allowed     = 8
                filesize_not_allowed      = 9
                header_too_long           = 10
                dp_error_create           = 11
                dp_error_send             = 12
                dp_error_write            = 13
                unknown_dp_error          = 14
                access_denied             = 15
                dp_out_of_memory          = 16
                disk_full                 = 17
                dp_timeout                = 18
                file_not_found            = 19
                dataprovider_exception    = 20
                control_flush_error       = 21
                not_supported_by_gui      = 22
                error_no_gui              = 23
                OTHERS                    = 24 ).

        IF syst-subrc IS NOT INITIAL.
          RAISE EXCEPTION TYPE lcx_texts EXPORTING text = 'Error Downloading Texts'.
        ENDIF.

      CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed  INTO lo_exception.
        RAISE EXCEPTION TYPE lcx_texts EXPORTING text = lo_exception->get_text( ).
    ENDTRY.


  ENDMETHOD.

ENDCLASS.
