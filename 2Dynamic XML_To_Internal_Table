************************************************************************
*   Program name:                                                      *
*   Description :                                                      *
*                                                                      *
*   Created   by: GDRAKOS DVALOUXIS                                    *
*                                                                      *
************************************************************************
REPORT XML_To_Internal_Table.

TYPES:BEGIN OF t_xml_table,
        value_node1 TYPE c LENGTH 50,
        value_node2 TYPE c LENGTH 50,
        value_node3 TYPE c LENGTH 50,
        value_node4 TYPE c LENGTH 50,
        value_node5 TYPE c LENGTH 50,
        value_node6 TYPE c LENGTH 50,
      END OF t_xml_table.

DATA:gt_data TYPE STANDARD TABLE OF t_xml_table WITH EMPTY KEY INITIAL SIZE 0.

CLASS lcl_xml DEFINITION CREATE PUBLIC.

  PUBLIC SECTION.

    METHODS:

      open_dialog EXPORTING ex_filepath    TYPE file_table-filename,

      read_xml IMPORTING im_filepath  TYPE file_table-filename
               EXPORTING ex_xml_table TYPE hrpayfr_t_smum_xmltb,

      get_structured_table_from_xml IMPORTING im_xml_table      TYPE hrpayfr_t_smum_xmltb
                                              im_attribute_node TYPE cname OPTIONAL
                                              im_map_by_index   TYPE abap_bool DEFAULT abap_false
                                    EXPORTING ex_table          TYPE ANY TABLE.

ENDCLASS.

CLASS lcl_xml IMPLEMENTATION.

  METHOD open_dialog.

    DATA:   lt_file_table TYPE filetable,
            lv_return     TYPE i.

    CLEAR:lt_file_table.
    CALL METHOD cl_gui_frontend_services=>file_open_dialog
      EXPORTING
        window_title            = 'File System of Presentation Server'
        default_extension       = cl_gui_frontend_services=>filetype_xml
        file_filter             = 'All Files(*.*)|*.*|' && 'XML Files (*.xml)|*.xml|'
      CHANGING
        file_table              = lt_file_table
        rc                      = lv_return
      EXCEPTIONS
        file_open_dialog_failed = 1
        cntl_error              = 2
        error_no_gui            = 3
        OTHERS                  = 4.

    CHECK sy-subrc IS INITIAL.

    TRY.
        ex_filepath =  lt_file_table[ 1 ]-filename.
      CATCH cx_sy_itab_line_not_found.
        CLEAR:ex_filepath.
        RETURN.
    ENDTRY.

  ENDMETHOD.

  METHOD read_xml.

    DATA: lt_return      TYPE TABLE OF bapiret2.

    DATA(lo_xml) = NEW cl_xml_document( ).

    CALL METHOD lo_xml->import_from_file
      EXPORTING
        filename = CONV #( im_filepath )
      RECEIVING
        retcode  = DATA(lv_subrc).

    IF lv_subrc EQ 0.
      CALL METHOD lo_xml->render_2_xstring
        IMPORTING
          retcode = lv_subrc
          stream  = DATA(lv_xml_xstring)
          size    = DATA(lv_size).

      IF lv_subrc EQ 0.

        CLEAR:lt_return.
        CALL FUNCTION 'SMUM_XML_PARSE'
          EXPORTING
            xml_input = lv_xml_xstring
          TABLES
            xml_table = ex_xml_table
            return    = lt_return.

      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD get_structured_table_from_xml.

    "CHEATSHEET: "Hier would hold the value ‘1’ for the element in the root node,‘Hier’ would hold the value ‘2’ for the fields in the Element node
    "Type holds for all the elements in the Header of the XML file would be ‘A’(attributes). It would be ‘V’(values) for the value nodes.For all the other nodes, it would hold a blank.
    "Cname contains the names of the nodes.
    "Cvalue contains the values held by the elements of the various nodes of an XML file

    DATA: ref_wa          TYPE REF TO data,
          lv_line_counter TYPE sy-tabix.

    FIELD-SYMBOLS: <fs_itab>  TYPE ANY TABLE,
                   <fs_wa>    TYPE any,
                   <fs_value> TYPE any.

    "CHECK IMPORTING TABLE IS NOT INITIAL
    CHECK im_xml_table IS NOT INITIAL.

    "CREATE A DYNAMIC TABLE WITH THE SAME STRUCTURE AS TARGETED TABLE
    ASSIGN ex_table  TO <fs_itab>.

    "DATA REFERENCE
    CREATE DATA ref_wa LIKE LINE OF <fs_itab>.
    ASSIGN ref_wa->* TO <fs_wa>.

    LOOP AT im_xml_table ASSIGNING FIELD-SYMBOL(<fs_xml_line>).

      DATA(lv_tabix) = sy-tabix.

      "MAP BY SUPPLIED ATTRIBUTE NODE
      IF im_attribute_node IS SUPPLIED.

        IF <fs_xml_line>-cname EQ im_attribute_node.

          CLEAR:lv_line_counter.
          DO.
            lv_line_counter = lv_line_counter + 1.
            READ TABLE im_xml_table INDEX lv_tabix + lv_line_counter INTO DATA(ls_xml_table).
            IF sy-subrc EQ 0 AND
               ls_xml_table-cname NE im_attribute_node AND
               ls_xml_table-type EQ 'V' .

              IF im_map_by_index EQ abap_true.
                ASSIGN COMPONENT lv_line_counter OF STRUCTURE <fs_wa> TO  <fs_value>.
              ELSE.
                ASSIGN COMPONENT ls_xml_table-cname OF STRUCTURE <fs_wa> TO  <fs_value>.
              ENDIF.

              IF <fs_value> IS ASSIGNED.
                <fs_value> = ls_xml_table-cvalue.
              ENDIF.

            ELSE.

              IF <fs_wa> IS NOT INITIAL.
                INSERT <fs_wa> INTO TABLE ex_table.
              ENDIF.

              CLEAR:<fs_wa>.
              EXIT.
            ENDIF.


          ENDDO.

        ENDIF.

      ELSE.

        IF <fs_xml_line>-type EQ 'A'.

          CLEAR:lv_line_counter.
          DO.
            lv_line_counter = lv_line_counter + 1.
            READ TABLE im_xml_table INDEX lv_tabix + lv_line_counter INTO ls_xml_table.
            IF sy-subrc EQ 0 AND
               ls_xml_table-type EQ 'V'.

              IF im_map_by_index EQ abap_true.
                ASSIGN COMPONENT lv_line_counter OF STRUCTURE <fs_wa> TO  <fs_value>.
              ELSE.
                ASSIGN COMPONENT ls_xml_table-cname OF STRUCTURE <fs_wa> TO  <fs_value>.
              ENDIF.

              IF <fs_value> IS ASSIGNED.
                <fs_value> = ls_xml_table-cvalue.
              ENDIF.

            ELSE.

              IF <fs_wa> IS NOT INITIAL.
                INSERT <fs_wa> INTO TABLE ex_table.
              ENDIF.

              CLEAR:<fs_wa>.
              EXIT.

            ENDIF.

          ENDDO.

        ENDIF.

      ENDIF.

    ENDLOOP.


  ENDMETHOD.


ENDCLASS.

START-OF-SELECTION.

  DATA(lo_xml) = NEW lcl_xml( ).

  lo_xml->open_dialog(
    IMPORTING
       ex_filepath = DATA(lv_filepath) ).

  lo_xml->read_xml(
    EXPORTING
      im_filepath  = lv_filepath
    IMPORTING
      ex_xml_table = DATA(lt_xml) ).

  lo_xml->get_structured_table_from_xml(
    EXPORTING
      im_xml_table = lt_xml
*      im_attribute_node = 'node_name'
*      im_map_by_index = abap_true
    IMPORTING
      ex_table = gt_data ).


  BREAK-POINT.

END-OF-SELECTION.
