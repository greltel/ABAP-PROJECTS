************************************************************************
*   Program name: Z_SALV_ALV
*   Description : Dynamic SALV Console
*
*   Created   by: GDRAKOS DVALOUXIS
*
************************************************************************
REPORT z_salv_alv  NO STANDARD PAGE HEADING LINE-COUNT 255.

*&---------------------------------------------------------------------*
*& DICTIONARY TABLES-TYPE POOLS
*&---------------------------------------------------------------------*
TYPE-POOLS:icon,slis,cntb.

TABLES:sscrfields.
*&---------------------------------------------------------------------*
*& LOCAL CLASSES
*&---------------------------------------------------------------------*
CLASS: lcl_main_salv       DEFINITION DEFERRED,
       lcl_utilities       DEFINITION DEFERRED,
       lcl_event_handler   DEFINITION DEFERRED,
       lcl_salv_edit       DEFINITION DEFERRED,
       lcl_sel_screen      DEFINITION DEFERRED,
       lcx_exception       DEFINITION DEFERRED.

*&---------------------------------------------------------------------*
*& GLOBAL CONSTANTS
*&---------------------------------------------------------------------*
CONSTANTS:gc_report_heading TYPE syst-title VALUE 'Dynamic SALV Report'.

*&---------------------------------------------------------------------*
*& GLOBAL DATA DECLARATION
*&---------------------------------------------------------------------*
FIELD-SYMBOLS: <fs_table> TYPE STANDARD TABLE.

TYPES:BEGIN OF ty_color,
        color       TYPE lvc_col,
        color_descr TYPE as4text,
      END OF ty_color,

      tt_color TYPE STANDARD TABLE OF ty_color WITH EMPTY KEY.

DATA t_color TYPE tt_color.

*&----------------------------------------------------------------------*
*&CLASS LCX_EXCEPTION DEFINITION
*&----------------------------------------------------------------------*
CLASS lcx_exception DEFINITION INHERITING FROM cx_static_check FINAL CREATE PUBLIC.

  PUBLIC SECTION.

    METHODS:
      constructor IMPORTING im_text     TYPE bapiret2-message OPTIONAL
                            im_textid   TYPE texid OPTIONAL
                            im_previous TYPE REF TO  cx_root OPTIONAL,
      get_text            REDEFINITION,
      get_longtext        REDEFINITION.

  PRIVATE SECTION.

    DATA:
         mv_message TYPE bapiret2-message.

ENDCLASS.

*----------------------------------------------------------------------*
*       CLASS LCL_SEL_SCREEN
*----------------------------------------------------------------------*
CLASS lcl_sel_screen DEFINITION CREATE PRIVATE FINAL.

  PUBLIC SECTION.

    CLASS-METHODS:
      get_instance RETURNING VALUE(re_instance) TYPE REF TO lcl_sel_screen.

    METHODS:
      screen_pbo,
      color_f4 IMPORTING im_fieldname TYPE help_info-dynprofld,
      fields_f4 IMPORTING im_fieldname TYPE help_info-dynprofld,
      screen_pai,
      screen_initialization.

  PRIVATE SECTION.

    CLASS-DATA:lo_instance TYPE REF TO lcl_sel_screen.

ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS LCL_MAIN_SALV
*----------------------------------------------------------------------*
CLASS lcl_main_salv DEFINITION CREATE PUBLIC FINAL FRIENDS lcl_event_handler lcl_utilities lcl_salv_edit.

  PUBLIC SECTION.

    TYPES:

      BEGIN OF ENUM en_alv_version,
        gui,
        fiori,
      END OF ENUM en_alv_version,

      BEGIN OF ENUM en_alv_container,
        standard,
        bottom,
        splitter,
        dialog,
        context,
      END OF ENUM en_alv_container,

      BEGIN OF ENUM en_data_source,
        excel,
        database,
      END OF ENUM en_data_source.

    METHODS:

      constructor IMPORTING im_version                TYPE en_alv_version
                            im_container              TYPE en_alv_container   OPTIONAL
                            im_layout                 TYPE disvariant-variant OPTIONAL
                            im_status                 TYPE rsmpe-status       OPTIONAL
                            im_technical_names        TYPE flag               OPTIONAL
                            im_hotspot_field          TYPE lvc_fname          OPTIONAL
                            im_hotspot_color          TYPE lvc_col            OPTIONAL
                            im_line_color             TYPE lvc_col            OPTIONAL
                            im_handle_gui_grid_events TYPE flag               DEFAULT abap_false,

      get_data    IMPORTING im_data_source     TYPE en_data_source
                            im_table           TYPE tabname             OPTIONAL
                            im_filepath        TYPE file_table-filename OPTIONAL
                            im_sheet_name      TYPE char20              OPTIONAL
                            im_number_of_lines TYPE syst_tabix          DEFAULT 100
                            im_field           TYPE char5               OPTIONAL
                            im_comp            TYPE ddoption            OPTIONAL
                            im_val             TYPE string              OPTIONAL
                            im_checkbox_column TYPE abap_bool           DEFAULT abap_true
                            im_icon_column     TYPE abap_bool           DEFAULT abap_true
                            im_head            TYPE abap_bool           DEFAULT abap_false
                  RAISING   lcx_exception,

      process_data RAISING lcx_exception,

      display_data RAISING lcx_exception.

  PROTECTED SECTION.

    CONSTANTS: lc_checkbox     TYPE char30 VALUE 'CHECK',
               lc_icon_column  TYPE char30 VALUE 'ICON',
               lc_cell_style   TYPE char30 VALUE 'CELL_STYLE',
               lc_color_column TYPE char30 VALUE 'LVC_COLOR'.

  PRIVATE SECTION.

    DATA: lv_layout                 TYPE disvariant-variant,
          lv_technical_names        TYPE flag,
          lv_hotspot_field          TYPE lvc_fname,
          lv_hotspot_color          TYPE lvc_col,
          lv_line_color             TYPE lvc_col,
          lv_status                 TYPE rsmpe-status,
          lv_version                TYPE en_alv_version,
          lv_handle_gui_grid_events TYPE flag,
          lv_data_source            TYPE en_data_source,
          lv_container              TYPE en_alv_container.

    DATA: t_filter_selopt TYPE salv_t_selopt_ref,
          lo_salv_alv     TYPE REF TO cl_salv_table.

    METHODS:
      create_alv              RAISING lcx_exception,
      field_catalog           RAISING lcx_exception,
      column_properties       RAISING lcx_exception,
      display_settings_header RAISING lcx_exception,
      header_creation         RAISING lcx_exception,
      header_creation_fiori   RAISING lcx_exception,
      footer_creation         RAISING lcx_exception,
      toolbar_status          RAISING lcx_exception,
      handle_gui_grid_events  RAISING lcx_exception,
      event_handling          RAISING lcx_exception,
      display_alv             RAISING lcx_exception.

ENDCLASS.

*----------------------------------------------------------------------*
*       CLASS lcl_utilities DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_utilities DEFINITION CREATE PUBLIC.

  PUBLIC SECTION.

    CLASS-METHODS:

      dynamic_where_clause IMPORTING im_field                TYPE char5
                                     im_comp                 TYPE ddoption DEFAULT if_fsbp_const_range=>option_equal
                                     im_val                  TYPE string
                                     im_table_name           TYPE tabname
                           RETURNING VALUE(re_select_clause) TYPE hrtb_cond,

      open_dialog_excel  RETURNING VALUE(re_filepath)  TYPE file_table-filename,

      check_field_exists_in_table IMPORTING im_field         TYPE char5
                                            im_table         TYPE tabname30
                                  RETURNING VALUE(re_exists) TYPE abap_bool,

      f4_salv CHANGING cv_layout TYPE disvariant-variant,

      get_structured_table_from_gen IMPORTING im_table            TYPE ANY TABLE
                                              im_map_by_structure TYPE abap_bool OPTIONAL
                                              im_structure_line   TYPE i DEFAULT 1
                                              im_start_line       TYPE i DEFAULT 2
                                    EXPORTING ex_table            TYPE ANY TABLE,

      upload_excel IMPORTING im_filepath     TYPE file_table-filename
                             im_sheet_name   TYPE char20 OPTIONAL
                             im_sheet_number TYPE i OPTIONAL
                   EXPORTING ex_table        TYPE REF TO data
                   RAISING   lcx_exception.

  PRIVATE SECTION.

    CLASS-METHODS:

      convert_to_internal_alpha IMPORTING im_external        TYPE any
                                RETURNING VALUE(re_internal) TYPE string,

      date_external_to_internal IMPORTING im_date                 TYPE string
                                RETURNING VALUE(re_date_internal) TYPE tumls_date.

ENDCLASS.

*----------------------------------------------------------------------*
*       CLASS lcl_salv_edit DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_salv_edit DEFINITION INHERITING FROM cl_salv_controller CREATE PRIVATE FINAL.

  PUBLIC SECTION.

    CLASS-METHODS:

      get_control_rtti IMPORTING i_salv         TYPE REF TO cl_salv_model_base
                       EXPORTING e_adapter_type TYPE salv_de_adapter_type
                                 e_control_rtti TYPE REF TO cl_abap_typedescr,

      get_control      IMPORTING i_salv           TYPE REF TO cl_salv_model_base
                       RETURNING VALUE(r_control) TYPE REF TO object,

      set_editable     IMPORTING VALUE(i_fieldname) TYPE csequence OPTIONAL
                                 i_salv_table       TYPE REF TO cl_salv_table
                                 VALUE(i_editable)  TYPE abap_bool DEFAULT abap_true
                                 VALUE(i_refresh)   TYPE abap_bool DEFAULT abap_true.

  PRIVATE SECTION.

    CLASS-METHODS: get_control_internal IMPORTING i_salv         TYPE REF TO cl_salv_model_base
                                        EXPORTING e_adapter_type TYPE salv_de_adapter_type
                                                  e_control      TYPE REF TO object.

ENDCLASS."lcl_salv_edit DEFINITION

*&----------------------------------------------------------------------*
*& CLASS lcl_event_handler DEFINITION
*&----------------------------------------------------------------------*
CLASS lcl_event_handler DEFINITION FINAL CREATE PUBLIC.

  PUBLIC SECTION.

    "HANDLE GUI GRID EVENTS
    INTERFACES if_alv_rm_grid_friend.

    "SALV EVENTS
    CLASS-METHODS:
      handle_double_click    FOR EVENT double_click        OF cl_salv_events_table IMPORTING row column,
      handle_hotspot         FOR EVENT link_click          OF cl_salv_events_table IMPORTING row column,
      on_user_command        FOR EVENT added_function      OF cl_salv_events_table IMPORTING e_salv_function,
      on_end_of_page         FOR EVENT end_of_page         OF cl_salv_events_table IMPORTING r_end_of_page page,
      on_top_of_page         FOR EVENT top_of_page         OF cl_salv_events_table IMPORTING r_top_of_page page,
      on_after_salv_function FOR EVENT after_salv_function OF cl_salv_events       IMPORTING e_salv_function.

    CLASS-METHODS: set_hotspot IMPORTING im_field TYPE lvc_fname im_alv TYPE REF TO cl_salv_table.

    "CL_GUI EVENTS
    CLASS-METHODS: on_function_selected FOR EVENT function_selected OF cl_gui_toolbar IMPORTING fcode sender.

    "GUI GRID EVENTS
    METHODS:
      event_after_refresh FOR EVENT after_refresh OF cl_gui_alv_grid IMPORTING sender,
      on_toolbar      FOR EVENT toolbar      OF cl_gui_alv_grid IMPORTING e_object e_interactive sender.

  PRIVATE SECTION.

    TYPES:BEGIN OF t_empty_column,
            column_name TYPE lvc_fname,
          END OF t_empty_column.

    CLASS-DATA: handler_added    TYPE abap_bool VALUE abap_false,
                lt_empty_columns TYPE STANDARD TABLE OF t_empty_column WITH EMPTY KEY,
                lo_struct_def    TYPE REF TO cl_abap_structdescr,
                lv_show_hide     TYPE abap_bool VALUE abap_false,
                gv_editable      TYPE abap_bool VALUE abap_false.

    CLASS-METHODS:
      show_hide_empty_columns,
      display_documentation,
      display_details_of_selection.

ENDCLASS.                    "lcl_event_handler DEFINITION

*&---------------------------------------------------------------------*
*& SELECTION SCREEN DESIGN
*&---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b0 WITH FRAME TITLE title0.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_db FOR FIELD db.
    PARAMETERS: db RADIOBUTTON GROUP rb0 DEFAULT 'X' USER-COMMAND dummy.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_file FOR FIELD file.
    PARAMETERS:file RADIOBUTTON GROUP rb0.
  SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b0.

SELECTION-SCREEN BEGIN OF BLOCK b05 WITH FRAME TITLE title05.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_excel FOR FIELD p_excel MODIF ID id3.
    PARAMETERS: p_excel TYPE file_table-filename MODIF ID id3.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_sheet FOR FIELD p_sheet MODIF ID id3.
    PARAMETERS: p_sheet TYPE char20 MODIF ID id3 LOWER CASE.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_head FOR FIELD p_head MODIF ID id3.
    PARAMETERS: p_head AS CHECKBOX DEFAULT  '' MODIF ID id3.
    SELECTION-SCREEN COMMENT 27(42) t_hdesc MODIF ID id3.
  SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b05.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE title1.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_table FOR FIELD p_table MODIF ID id4.
    PARAMETERS: p_table TYPE tabname OBLIGATORY DEFAULT 'BSEG' MATCHCODE OBJECT dd_dbtb_16 MODIF ID id4.
    SELECTION-SCREEN COMMENT 57(55) t_descr MODIF ID id4.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    PARAMETERS: p_editf TYPE lvc_fname NO-DISPLAY.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_hotsp FOR FIELD p_hotsp MODIF ID id4.
    PARAMETERS: p_hotsp TYPE lvc_fname MODIF ID id4.
    SELECTION-SCREEN COMMENT 57(55) h_descr MODIF ID id4.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_colh FOR FIELD p_colh MODIF ID id4.
    PARAMETERS: p_colh TYPE lvc_col DEFAULT 6 MODIF ID id4.
    SELECTION-SCREEN COMMENT 38(50) t_desch MODIF ID id4.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_coll FOR FIELD p_coll.
    PARAMETERS: p_coll TYPE lvc_col DEFAULT space.
    SELECTION-SCREEN COMMENT 38(50) t_descl.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_layout FOR FIELD p_layout MODIF ID id4.
    PARAMETERS: p_layout TYPE disvariant-variant VISIBLE LENGTH 11 MODIF ID id4.
    SELECTION-SCREEN COMMENT 38(50) t_ldescr MODIF ID id4.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(22) t_hits FOR FIELD p_hits MODIF ID id4.
    PARAMETERS: p_hits TYPE syst_tabix DEFAULT 10 MODIF ID id4.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_names FOR FIELD p_names MODIF ID id4.
    PARAMETERS: p_names AS CHECKBOX DEFAULT space MODIF ID id4.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_check FOR FIELD p_check.
    PARAMETERS: p_check AS CHECKBOX DEFAULT space.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_icon FOR FIELD p_icon.
    PARAMETERS: p_icon AS CHECKBOX DEFAULT space.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_r1 FOR FIELD r1.
    PARAMETERS: r1 RADIOBUTTON GROUP rb1 DEFAULT 'X' USER-COMMAND dummy.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_r2 FOR FIELD r2.
    PARAMETERS: r2 RADIOBUTTON GROUP rb1.
  SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b4 WITH FRAME TITLE title4.

  SELECTION-SCREEN BEGIN OF LINE.

    PARAMETERS: p_fiel TYPE char5 MODIF ID id4,
                p_comp TYPE ddoption DEFAULT if_fsbp_const_range=>option_equal MODIF ID id4,
                p_val  TYPE string MODIF ID id4.

  SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b4.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE title2.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_stand FOR FIELD p_stand MODIF ID id1.
    PARAMETERS: p_stand RADIOBUTTON GROUP rb2 DEFAULT 'X' MODIF ID id1 .
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_doc FOR FIELD p_doc MODIF ID id1.
    PARAMETERS: p_doc RADIOBUTTON GROUP rb2  MODIF ID id1 .
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_split FOR FIELD p_split MODIF ID id1.
    PARAMETERS: p_split RADIOBUTTON GROUP rb2 MODIF ID id1 .
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_dial FOR FIELD p_dial MODIF ID id1.
    PARAMETERS: p_dial RADIOBUTTON GROUP rb2 MODIF ID id1 .
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_cont FOR FIELD p_cont MODIF ID id1.
    PARAMETERS: p_cont RADIOBUTTON GROUP rb2 MODIF ID id1 .
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN SKIP 1.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_event FOR FIELD p_event MODIF ID id1.
    PARAMETERS: p_event AS CHECKBOX MODIF ID id1 .
  SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b2.

SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE title3.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_popup FOR FIELD p_popup MODIF ID id2.
    PARAMETERS: p_popup AS CHECKBOX DEFAULT space MODIF ID id2.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN COMMENT 1(26) t_status FOR FIELD p_status MODIF ID id2.
    PARAMETERS: p_status TYPE rsmpe-status MODIF ID id2.
  SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b3.

*&---------------------------------------------------------------------*
*& INITIALIZATION OF SELECTION SCREEN ELEMENTS
*&---------------------------------------------------------------------*
INITIALIZATION.
  lcl_sel_screen=>get_instance( )->screen_initialization( ).

*&---------------------------------------------------------------------*
*& AT SELECTION SCREEN MODIFICATION (PBO)
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN OUTPUT.
  lcl_sel_screen=>get_instance( )->screen_pbo( ).

*&---------------------------------------------------------------------*
*& AT SELECTION SCREEN ON VALUE REQUESTS (F4)
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_layout.
  lcl_utilities=>f4_salv( CHANGING cv_layout = p_layout ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_hotsp.
  lcl_sel_screen=>get_instance( )->fields_f4( 'P_HOTSP' ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fiel.
  lcl_sel_screen=>get_instance( )->fields_f4( 'P_FIEL' ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_coll.
  lcl_sel_screen=>get_instance( )->color_f4( 'P_COLL' ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_colh.
  lcl_sel_screen=>get_instance( )->color_f4( 'P_COLH' ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_excel.
  p_excel = lcl_utilities=>open_dialog_excel( ).

*&---------------------------------------------------------------------*
*& AT SELECTION SCREEN Actions(PAI)
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.
  lcl_sel_screen=>get_instance( )->screen_pai( ).

*&---------------------------------------------------------------------*
*& EXECUTABLE CODE
*&---------------------------------------------------------------------*
START-OF-SELECTION.

  TRY.
      DATA(go_lcl_main) = NEW lcl_main_salv( im_version                 = COND #( WHEN r1 EQ abap_true THEN lcl_main_salv=>gui
                                                                                  WHEN r2 EQ abap_true THEN lcl_main_salv=>fiori
                                                                                  ELSE lcl_main_salv=>fiori )
                                             im_container               = COND #( WHEN p_stand EQ abap_true THEN lcl_main_salv=>standard
                                                                                  WHEN p_doc   EQ abap_true THEN lcl_main_salv=>bottom
                                                                                  WHEN p_split EQ abap_true THEN lcl_main_salv=>splitter
                                                                                  WHEN p_dial  EQ abap_true THEN lcl_main_salv=>dialog
                                                                                  WHEN p_cont  EQ abap_true THEN lcl_main_salv=>context
                                                                                  ELSE lcl_main_salv=>standard )
                                             im_layout                  = p_layout
                                             im_technical_names         = p_names
                                             im_status                  = p_status
                                             im_hotspot_field           = p_hotsp
                                             im_hotspot_color           = p_colh
                                             im_line_color              = p_coll
                                             im_handle_gui_grid_events  = p_event ).

      go_lcl_main->get_data( im_data_source     = COND #( WHEN db   EQ abap_true THEN lcl_main_salv=>database
                                                          WHEN file EQ abap_true THEN lcl_main_salv=>excel
                                                          ELSE THROW lcx_exception( im_text = 'Invalid Data Source Selection' )  )
                             im_filepath        = p_excel
                             im_sheet_name      = p_sheet
                             im_head            = p_head
                             im_table           = p_table
                             im_number_of_lines = p_hits
                             im_comp            = p_comp
                             im_field           = p_fiel
                             im_val             = p_val
                             im_checkbox_column = p_check
                             im_icon_column     = p_icon ).

      go_lcl_main->process_data( ).
      go_lcl_main->display_data( ).

    CATCH lcx_exception INTO DATA(lo_exception).
      MESSAGE lo_exception->get_text( ) TYPE cl_cms_common=>con_msg_typ_i DISPLAY LIKE cl_cms_common=>con_msg_typ_e.
  ENDTRY.

END-OF-SELECTION.
*&---------------------------------------------------------------------*
*& END OF EXECUTABLE CODE
*&---------------------------------------------------------------------*

*----------------------------------------------------------------------*
*CLASS LCL_MAIN_SALV IMPLEMENTATION
*----------------------------------------------------------------------*

CLASS lcl_main_salv IMPLEMENTATION.

  METHOD constructor.

    "SET VALUES FOR ATTRIBUTES
    lv_layout                 = im_layout.
    lv_technical_names        = im_technical_names.
    lv_hotspot_field          = im_hotspot_field.
    lv_hotspot_color          = im_hotspot_color.
    lv_line_color             = im_line_color.
    lv_handle_gui_grid_events = im_handle_gui_grid_events.
    lv_version                = im_version.
    lv_container              = im_container.
    lv_status                 = im_status.

    "SET TITLE FOR ALV SCREEN
    syst-title = gc_report_heading.

  ENDMETHOD.

  METHOD get_data.

    IF im_data_source EQ lcl_main_salv=>excel AND im_filepath IS NOT INITIAL.

      me->lv_data_source = lcl_main_salv=>excel.

      lcl_utilities=>upload_excel(
        EXPORTING
          im_filepath   = im_filepath
          im_sheet_name = im_sheet_name
        IMPORTING
          ex_table      = DATA(lo_data_ref) ).

      "Create Dynamic Internal Table with Column Heading
      DATA(lt_component) = VALUE cl_abap_structdescr=>component_table(
                            ( name = lc_cell_style  type  = CAST #( cl_abap_elemdescr=>describe_by_name( 'salv_t_int4_column' ) ) )
                            ( name = lc_color_column type = CAST #( cl_abap_elemdescr=>describe_by_name( 'lvc_t_scol' ) ) ) ).

      IF im_icon_column EQ abap_true.
        APPEND VALUE abap_componentdescr( name = lc_icon_column type = cl_abap_elemdescr=>get_c( cl_mmim_maa_2=>gc_integer_8 ) ) TO lt_component.
      ENDIF.

      IF im_checkbox_column EQ abap_true.
        APPEND VALUE abap_componentdescr( name = lc_checkbox type = cl_abap_elemdescr=>get_c( cl_mmim_maa_2=>gc_integer_1 ) ) TO lt_component.
      ENDIF.

      FIELD-SYMBOLS: <fs_tab> TYPE STANDARD TABLE.
      ASSIGN lo_data_ref->* TO <fs_tab>.

      DO.

        ASSIGN COMPONENT syst-index OF STRUCTURE <fs_tab>[ 1 ] TO FIELD-SYMBOL(<fs>).
        IF <fs> IS NOT INITIAL AND
           syst-subrc IS INITIAL.

          IF im_head EQ abap_true.
            CONDENSE <fs> NO-GAPS.
            APPEND VALUE #( name = |{ <fs> }| type = cl_abap_elemdescr=>get_c( 30 ) ) TO lt_component.
          ELSE.
            APPEND VALUE #( name = |column_{ syst-index }| type = cl_abap_elemdescr=>get_c( 30 ) ) TO lt_component.
          ENDIF.

        ELSE.

          EXIT.

        ENDIF.

      ENDDO.

      "Table type
      TRY.
          DATA(lo_new_table) = cl_abap_tabledescr=>create(
                               p_line_type  = cl_abap_structdescr=>create( lt_component )
                               p_table_kind = cl_abap_tabledescr=>tablekind_std
                               p_unique     = abap_false ).
        CATCH cx_sy_struct_attributes cx_sy_struct_comp_name INTO DATA(lo_exception). "#EC NO_HANDLER
          RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = CONV #( lo_exception->get_text( ) ).
      ENDTRY.

      "Data to handle the new table type
      DATA:lo_data_table TYPE REF TO data.
      CREATE DATA lo_data_table TYPE HANDLE lo_new_table.

      "New internal table in fieldsymbol
      ASSIGN lo_data_table->* TO <fs_table>.

      "MAP VALUE TABLE TO STRUCTURED TABLE
      lcl_utilities=>get_structured_table_from_gen(
        EXPORTING
          im_map_by_structure = COND #( WHEN im_head EQ abap_true  THEN abap_false
                                        WHEN im_head EQ abap_false THEN abap_true )
          im_start_line       = COND #( WHEN im_head EQ abap_true  THEN 2
                                        WHEN im_head EQ abap_false THEN 1 )
          im_table            = <fs_tab>
        IMPORTING
          ex_table            = <fs_table> ).


    ELSEIF im_data_source EQ lcl_main_salv=>database AND im_table IS NOT INITIAL.

      lv_data_source = lcl_main_salv=>database.

      "Build Components of Dynamic Table
      DATA:lo_data  TYPE REF TO data.

      DATA(lt_tot_comp) = VALUE cl_abap_structdescr=>component_table(
                            ( name = lc_cell_style  type = CAST #( cl_abap_elemdescr=>describe_by_name( 'salv_t_int4_column' ) ) )
                            ( name = lc_color_column type = CAST #( cl_abap_elemdescr=>describe_by_name( 'lvc_t_scol' ) ) ) ).

      IF im_icon_column EQ abap_true.
        APPEND VALUE abap_componentdescr( name = lc_icon_column type = cl_abap_elemdescr=>get_c( cl_mmim_maa_2=>gc_integer_8 ) ) TO lt_tot_comp.
      ENDIF.

      IF im_checkbox_column EQ abap_true.
        APPEND VALUE abap_componentdescr( name = lc_checkbox  type = cl_abap_elemdescr=>get_c( cl_mmim_maa_2=>gc_integer_1 ) ) TO lt_tot_comp.
      ENDIF.

      DATA(lo_struct) = CAST cl_abap_structdescr( cl_abap_typedescr=>describe_by_name( im_table ) ).
      DATA(lt_comp)  =  lo_struct->get_components( ).
      APPEND LINES OF lt_comp TO lt_tot_comp.

      DELETE lt_tot_comp WHERE suffix IS NOT INITIAL.

      "Table type
      TRY.
          DATA(lo_new_tab) = cl_abap_tabledescr=>create(
                             p_line_type  = cl_abap_structdescr=>create( lt_tot_comp )
                             p_table_kind = cl_abap_tabledescr=>tablekind_std
                             p_unique     = abap_false ).
        CATCH cx_sy_struct_attributes cx_sy_struct_comp_name INTO DATA(lo_exception2). "#EC NO_HANDLER
          RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = CONV #( lo_exception2->get_text( ) ).
      ENDTRY.

      "Data to handle the new table type
      CREATE DATA lo_data TYPE HANDLE lo_new_tab.

      "New internal table in fieldsymbol
      ASSIGN lo_data->* TO <fs_table>.

      "Build Dynamic Where Clause
      IF ( im_field IS NOT INITIAL ) AND ( im_comp IS NOT INITIAL ) AND ( im_val IS NOT INITIAL ) .
        DATA(lt_select_clause) = lcl_utilities=>dynamic_where_clause( EXPORTING im_comp = im_comp im_field = im_field im_val = im_val im_table_name = im_table ).
      ENDIF.

      IF <fs_table> IS ASSIGNED.

        SELECT *
        FROM (im_table)
        INTO CORRESPONDING FIELDS OF TABLE @<fs_table>
        UP TO @im_number_of_lines ROWS
        WHERE (lt_select_clause).

        IF <fs_table> IS INITIAL.
          RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = | No value Retrieved from Table: { im_table } |.
        ENDIF.

      ELSE.
        RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = 'Error while Creating Dynamic Table'.
      ENDIF.

    ELSE.
      RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = 'Missing Parameters for Data Retrieval'.
    ENDIF.

  ENDMETHOD.

  METHOD process_data.

    LOOP AT <fs_table> ASSIGNING FIELD-SYMBOL(<fs_structure>).

      ASSIGN COMPONENT lc_icon_column  OF STRUCTURE <fs_structure> TO FIELD-SYMBOL(<lv_icon_value>).
      ASSIGN COMPONENT lc_color_column OF STRUCTURE <fs_structure> TO FIELD-SYMBOL(<lv_color_value>).
      ASSIGN COMPONENT lc_cell_style   OF STRUCTURE <fs_structure> TO FIELD-SYMBOL(<lv_cell_style>).

      "Color Hotspot Field
      IF lv_hotspot_field IS NOT INITIAL AND lv_hotspot_color IS NOT INITIAL AND <lv_color_value> IS ASSIGNED.
        <lv_color_value> = VALUE lvc_t_scol( ( fname = lv_hotspot_field color-col = lv_hotspot_color color-int = 0 color-inv = 0 ) ).
      ENDIF.

      "Color of Lines
      IF lv_line_color IS NOT INITIAL AND <lv_color_value> IS ASSIGNED .
        <lv_color_value> = VALUE lvc_t_scol( ( color-col = lv_line_color color-int = 0 color-inv = 0 ) ).
      ENDIF.

      "Set Cell Style
      IF <lv_cell_style> IS ASSIGNED.
        <lv_cell_style> = VALUE salv_t_int4_column( ( columnname = 'COLUMN_NAME'  value = if_salv_c_cell_type=>button ) ).
      ENDIF.

      "Icons
      IF <lv_icon_value> IS ASSIGNED.
        CASE syst-tabix MOD 4.
          WHEN 1.
            <lv_icon_value> =  icon_green_light.
          WHEN 2.
            <lv_icon_value> =  icon_cancel.
          WHEN 3.
            <lv_icon_value> = icon_locked.
          WHEN OTHERS.
            <lv_icon_value> = icon_address.
        ENDCASE.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD display_data.

*----------------------------INSTANTIATE ALV OBJECT----------------------------*
    me->create_alv( ).
*----------------------FIELD CATALOG-FIELD LABELS------------------------------*
    me->field_catalog( ).
*-------------------COLUMN MANIPULATION-SORT-AGGREGATION-COLOUR----------------*
    me->column_properties( ).
*--------------------LAYOUTSETTINGS-DISPLAY SETTINGS-------------------*
    me->display_settings_header( ).
*--------------------------------HEADER----------------------------------------*
    me->header_creation( ).
*--------------------------------FOOTER----------------------------------------*
    me->footer_creation( ).
*------------------------FUNCTIONS-TOOLBAR-CUSTOM STATUS-----------------------*
    me->toolbar_status( ).
*----------------------------Handle GUI Grid Events----------------------------*
    me->handle_gui_grid_events( ).
*---------------------------------EVENT HANDLING-------------------------------*
    me->event_handling( ).
*--------------------------------ALV DISPLAY-----------------------------------*
    me->display_alv( ).

  ENDMETHOD.

  METHOD create_alv.

    IF lv_version EQ lcl_main_salv=>gui."GUI VERSION.

      CASE lv_container.

        WHEN lcl_main_salv=>bottom."ALV IN DOCKING CONTAINER

          DATA(o_docking_container) = NEW cl_gui_docking_container( no_autodef_progid_dynnr = abap_true
                                                       side = cl_gui_docking_container=>dock_at_bottom
                                                       ratio = 90 ).
          TRY.
              cl_salv_table=>factory( EXPORTING
                                       r_container    = o_docking_container
                                     IMPORTING
                                       r_salv_table   = lo_salv_alv
                                     CHANGING
                                       t_table        = <fs_table> ).
            CATCH cx_salv_msg.                          "#EC NO_HANDLER
          ENDTRY.

        WHEN lcl_main_salv=>standard ."ALV IN CUSTOM CONTAINER

          TRY.
              cl_salv_table=>factory(
                  EXPORTING
                    r_container    = cl_gui_container=>default_screen
                    list_display   = if_salv_c_bool_sap=>false
                  IMPORTING
                    r_salv_table   = lo_salv_alv
                  CHANGING
                    t_table        = <fs_table> ).
            CATCH cx_salv_msg.                          "#EC NO_HANDLER
          ENDTRY.


        WHEN lcl_main_salv=>splitter."ALV IN SPLITTER CONTAINER

          DATA(o_splitter_container) = NEW cl_gui_splitter_container( parent = cl_gui_container=>default_screen
                                                      no_autodef_progid_dynnr = abap_true
                                                      rows = 1
                                                      columns = 2 ).

          DATA(o_spl_left) = o_splitter_container->get_container( row = 1 column = 1 ).

          TRY.
              cl_salv_table=>factory(
                  EXPORTING
                    r_container    = o_spl_left
                    list_display   = if_salv_c_bool_sap=>false
                  IMPORTING
                    r_salv_table   = lo_salv_alv
                  CHANGING
                    t_table        = <fs_table> ).
            CATCH cx_salv_msg.                          "#EC NO_HANDLER
          ENDTRY.

        WHEN lcl_main_salv=>dialog."ALV IN DIALOG BOX

          DATA(o_gui_cnt) = NEW cl_gui_dialogbox_container( no_autodef_progid_dynnr = abap_true
                                                            caption = 'ALV in Dialog Box'
                                                            top = 20
                                                            left = 20
                                                            width = 1280
                                                            height = 400 ).

          TRY.
              cl_salv_table=>factory(
                  EXPORTING
                    r_container    = o_gui_cnt
                    list_display   = if_salv_c_bool_sap=>false
                  IMPORTING
                    r_salv_table   = lo_salv_alv
                  CHANGING
                    t_table        = <fs_table> ).
            CATCH cx_salv_msg.                          "#EC NO_HANDLER
          ENDTRY.

        WHEN lcl_main_salv=>context."ALV WITH CONTEXT MENU

          "CREATE SPLITTER
          DATA(o_splitter) = NEW cl_gui_splitter_container( parent = cl_gui_container=>default_screen
                                                  no_autodef_progid_dynnr = abap_true
                                                  rows = 2
                                                  columns = 1 ).

          "ABSOLUTE ROW HEIGHT
          o_splitter->set_row_mode( mode = cl_gui_splitter_container=>mode_absolute ).

          "ABSOLUTE HEIGHT 24 PIXELS FOR SPLITTER ABOVE
          o_splitter->set_row_height( id = 1 height = 24 ).

          "Splitter for top container fixed and hidden
          o_splitter->set_row_sash( id = 1
                          type = cl_gui_splitter_container=>type_movable
                          value = cl_gui_splitter_container=>false ).

          o_splitter->set_row_sash( id = 1
                         type = cl_gui_splitter_container=>type_sashvisible
                         value = cl_gui_splitter_container=>false ).

          "Create Top and Bottom Custom Container
          DATA(o_container_top) = o_splitter->get_container( row = 1 column = 1 ).
          DATA(o_container_bottom) = o_splitter->get_container( row = 2 column = 1 ).

          "Horizontal Toolbar
          DATA(o_tool) = NEW cl_gui_toolbar( parent = o_container_top
                                   display_mode = cl_gui_toolbar=>m_mode_horizontal ).

          "Register of Event Types.Must be registered Separately
          TYPES: ty_it_events TYPE STANDARD TABLE OF cntl_simple_event WITH DEFAULT KEY.
          DATA(it_events) = VALUE ty_it_events( ( eventid = cl_gui_toolbar=>m_id_function_selected
                                        appl_event = abap_true ) ).

          o_tool->set_registered_events( events = it_events ).

          "Add toolbar buttons. Button types are defined in type group CNTB
          o_tool->add_button( fcode       = 'BTN_MENU'
                              icon        = icon_activate
                              butn_type   = cntb_btype_menu
                              text        = 'Menu'
                              quickinfo   = 'Menu'
                              is_checked  = abap_false
                              is_disabled = abap_false ).

          DATA(o_menu) = NEW cl_ctmenu( ).
          o_menu->add_function( fcode   = 'F1'
                                 checked = abap_false
                                 text    = 'Function1' ).

          o_menu->add_function( fcode   = 'F2'
                                  checked = abap_false
                                  text    = 'Function2' ).


          DATA(it_ctxmenu) = VALUE ttb_btnmnu( ( function = 'BTN_MENU'
                                                 ctmenu   = o_menu ) ).

          o_tool->assign_static_ctxmenu_table( it_ctxmenu ).

          "Separator
          o_tool->add_button( fcode       = ''
                              icon        = ''
                              butn_type   = cntb_btype_sep
                              text        = ''
                              quickinfo   = ''
                              is_checked  = abap_false
                              is_disabled = abap_false ).

          "Add Exit Button
          o_tool->add_button( fcode       = 'BTN_CLOSE'
                              icon        = icon_close
                              butn_type   = cntb_btype_button
                              text        = 'Close'
                              quickinfo   = 'Close'
                              is_checked  = abap_false
                              is_disabled = abap_false ).

          "Event Handler Registration for Buttons
          SET HANDLER lcl_event_handler=>on_function_selected FOR o_tool.

          TRY.
              cl_salv_table=>factory(
                  EXPORTING
                    r_container   = o_container_bottom
                  IMPORTING
                    r_salv_table   = lo_salv_alv
                  CHANGING
                    t_table        = <fs_table> ).
            CATCH cx_salv_msg.                          "#EC NO_HANDLER
          ENDTRY.

      ENDCASE.

    ELSEIF lv_version EQ lcl_main_salv=>fiori."FIORI VERSION.

      TRY.
          cl_salv_table=>factory(
              EXPORTING
                list_display   = if_salv_c_bool_sap=>false
              IMPORTING
                r_salv_table   = lo_salv_alv
              CHANGING
                t_table        = <fs_table> ).
        CATCH cx_salv_msg.                              "#EC NO_HANDLER
      ENDTRY.

      IF ( p_popup EQ abap_true ).

        lo_salv_alv->set_screen_popup( start_column = 1
                                  end_column   = 140
                                  start_line   = 1
                                  end_line     = 30 ).

      ENDIF.

    ENDIF.

    IF lo_salv_alv IS NOT BOUND.
      RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = 'Error while creating ALV Reference'.
    ENDIF.

  ENDMETHOD.

  METHOD field_catalog.

    IF  lv_data_source EQ lcl_main_salv=>database.

      " Set information regarding currency and quantity.It is not set automatically
      TRY.
          "Quantity
          CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( 'CHANGE' ) )->set_quantity_column( 'MEINS' )."Quantity Column and Unit of Measure

          "Currency
          CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( 'CHANGE' ) )->set_currency_column( 'WAERS' ). "Currency Value and Currency Key

        CATCH cx_salv_not_found cx_salv_data_error.     "#EC NO_HANDLER
      ENDTRY.

*   Show technical and regular column names at the same time as column names
      IF lv_technical_names EQ abap_true.
        LOOP AT lo_salv_alv->get_columns( )->get( ) ASSIGNING FIELD-SYMBOL(<c>).
          <c>-r_column->set_short_text( |{ <c>-r_column->get_columnname( ) } [{ <c>-r_column->get_short_text( ) }]| ).
          <c>-r_column->set_medium_text( |{ <c>-r_column->get_columnname( ) } [{ <c>-r_column->get_medium_text( ) }]| ).
          <c>-r_column->set_long_text( |{ <c>-r_column->get_columnname( ) } [{ <c>-r_column->get_long_text( ) }]| ).
        ENDLOOP.
      ENDIF.

*   For each column if Field Label is Initial set Column Name as Text

      LOOP AT lo_salv_alv->get_columns( )->get( ) ASSIGNING FIELD-SYMBOL(<fs_cols>).

        IF <fs_cols>-r_column->get_short_text( ) IS INITIAL.
          <fs_cols>-r_column->set_short_text( CONV #( <fs_cols>-columnname ) ).
        ENDIF.

        IF <fs_cols>-r_column->get_medium_text( ) IS INITIAL.
          <fs_cols>-r_column->set_medium_text( CONV #( <fs_cols>-columnname ) ).
        ENDIF.

        IF <fs_cols>-r_column->get_long_text( ) IS INITIAL.
          <fs_cols>-r_column->set_long_text( CONV #( <fs_cols>-columnname ) ).
        ENDIF.

      ENDLOOP.

*   Specify the name of the Column with No Field Labels-Build Field Catalog
      TRY.
          lo_salv_alv->get_columns( )->get_column('CHANGE' :
           )->set_long_text('CHANGE'),
           )->set_medium_text('CHANGE'),
           )->set_short_text('CHANGE').
        CATCH cx_salv_not_found .                       "#EC NO_HANDLER
      ENDTRY.

*  Dynamic Build Catalog of Table

*      TRY.
*          cl_salv_table=>factory( IMPORTING
*                                    r_salv_table   = DATA(salv_table)
*                                  CHANGING
*                                    t_table        = gt_table  ).
*
*          DATA(lv_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog(
*              r_columns      = salv_table->get_columns( ) " ALV Filter
*              r_aggregations = salv_table->get_aggregations( ) ). " ALV Aggregations
*
*        CATCH cx_root.
*      ENDTRY.
*
*       IF lv_fcat IS NOT INITIAL.
*
*        LOOP AT lv_fcat ASSIGNING FIELD-SYMBOL(<fs_field_catalog>).
*
*          TRY.
*              lo_salv_alv->get_columns( )->get_column( <fs_field_catalog>-fieldname )->set_short_text( CONV #( <fs_field_catalog>-fieldname ) ).
*              lo_salv_alv->get_columns( )->get_column( <fs_field_catalog>-fieldname )->set_medium_text( CONV #( <fs_field_catalog>-fieldname ) ).
*              lo_salv_alv->get_columns( )->get_column( <fs_field_catalog>-fieldname )->set_long_text( CONV #( <fs_field_catalog>-fieldname ) ).
*            CATCH cx_salv_not_found.
*          ENDTRY.
*
*        ENDLOOP.
*
*      ENDIF.


    ELSEIF lv_data_source EQ lcl_main_salv=>excel.

      LOOP AT lo_salv_alv->get_columns( )->get( ) ASSIGNING FIELD-SYMBOL(<fs_col>).

        IF <fs_col>-r_column->get_short_text( ) IS INITIAL.
          <fs_col>-r_column->set_short_text( CONV #( <fs_col>-columnname ) ).
        ENDIF.

        IF <fs_col>-r_column->get_medium_text( ) IS INITIAL.
          <fs_col>-r_column->set_medium_text( CONV #( <fs_col>-columnname ) ).
        ENDIF.

        IF <fs_col>-r_column->get_long_text( ) IS INITIAL.
          <fs_col>-r_column->set_long_text( CONV #( <fs_col>-columnname ) ).
        ENDIF.

      ENDLOOP.

    ENDIF.

  ENDMETHOD.

  METHOD column_properties.

* Center Columns
    LOOP AT lo_salv_alv->get_columns( )->get( ) ASSIGNING FIELD-SYMBOL(<c>).
      <c>-r_column->set_alignment( if_salv_c_alignment=>centered  ).
    ENDLOOP.

* Optimize Columns Width
    lo_salv_alv->get_columns( )->set_optimize( if_salv_c_bool_sap=>true ).

* Hide Zeros from Specific Column
    TRY.
        lo_salv_alv->get_columns( )->get_column('CHANGE')->set_zero( space ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

*   Set Edit Mask(Conversion Exit) for a field
    TRY.
        "Use and Conversion Exit Function Module or Create your Own
        lo_salv_alv->get_columns( )->get_column('CHANGE')->set_edit_mask( '==OUTPUT_CONVERSION' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

*   Set the Cell Type
    TRY.
        lo_salv_alv->get_columns( )->set_cell_type_column( lc_cell_style ).
      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
    ENDTRY.

*COLOR LINE
    TRY.
        "Instructions: Include in your alv table color TYPE lvc_t_scol. Then populate the specific table for
        "every row that you want to color.Populate the line of the table by looping and add this code
        "<fs_table_line>-color = VALUE #( ( color-col = 5 color-int = 0 color-inv = 0 ) ).
        lo_salv_alv->get_columns( )->set_color_column(  lc_color_column ).
      CATCH cx_salv_data_error cx_salv_invalid_input.   "#EC NO_HANDLER
    ENDTRY.

*COLOR COLUMN
    TRY.
        CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( lv_hotspot_field ) )->set_color( VALUE lvc_s_colo( col = lv_hotspot_color int = 1 inv = 1 ) ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

* Add Icon To Column ICON
    TRY.
        CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( lc_icon_column ):
          )->set_icon( if_salv_c_bool_sap=>true ),
          )->set_alignment( if_salv_c_alignment=>centered ),
          )->set_short_text( 'Icon' ),
          )->set_medium_text( 'Icon Status' ),
          )->set_long_text( 'Icon Status' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

* Add Checkbox Column
    TRY.
        CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( lc_checkbox  ):
         )->set_cell_type( if_salv_c_cell_type=>checkbox_hotspot ),
         )->set_output_length( 10 ),
         )->set_short_text( 'Checkbox' ),
         )->set_medium_text( 'Checkbox' ),
         )->set_long_text( 'Checkbox' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

* Add Tooltips to Icons
    TRY.
        lo_salv_alv->get_functional_settings( )->get_tooltips( )->add_tooltip( type = cl_salv_tooltip=>c_type_icon
                                                                               value = |{ icon_green_light }|
                                                                               tooltip = 'Text Under Specified Icon' ).
      CATCH cx_salv_existing.                           "#EC NO_HANDLER
    ENDTRY.

*Add Tooltips to Fields
    TRY.
        lo_salv_alv->get_columns( )->get_column('CHANGE')->set_tooltip( 'Tooltip Text' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

* Hide Specified Column
    TRY.
        lo_salv_alv->get_columns( )->get_column( 'CHANGE' )->set_visible( abap_false ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

* display and fix column as key column
    TRY.
        "Define Column as Key Column
        CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( 'CHANGE' ) )->set_key( abap_true ).

        "Fix Key Columns
        lo_salv_alv->get_columns( )->set_key_fixation( abap_true ).
      CATCH cx_root.                                    "#EC NO_HANDLER
    ENDTRY.


    "Apply Filter for Column
    TRY.

        lo_salv_alv->get_filters(:
        )->remove_filter( 'CHANGE' ),"Remove Filter
        )->add_filter( columnname = 'CHANGE' sign = if_fsbp_const_range=>sign_include option = if_fsbp_const_range=>option_equal low = '100' ). "Add new Filter for Specific Column.

        "Save Filter to Table
        t_filter_selopt  = lo_salv_alv->get_filters( )->get_filter( 'CHANGE' )->get( ).

      CATCH cx_salv_existing cx_salv_data_error cx_salv_not_found. "#EC NO_HANDLER
    ENDTRY.

    "AGGREGATIONS-TOTALS-----------------------------------------------------------------------
    TRY.
        "To add totals we need to use GET_AGGREGATIONS, once we get aggregations instance,
        "we need to add aggregation by passing column name and aggregation type to method ADD_AGGREGATION.

        lo_salv_alv->get_aggregations(:
        )->add_aggregation( columnname  = 'CHANGE'   "aggregation column name
                           aggregation = if_salv_c_aggregation=>total ),"aggregation type
        )->set_aggregation_before_items( value = abap_true )."Bring Aggregation to Top

      CATCH cx_salv_existing cx_salv_not_found cx_salv_data_error. "#EC NO_HANDLER
    ENDTRY.

    "SORTS-SUBTOTALS----------------------------------------------------------------------
    TRY.
        "To add subtotals, we need to add sort to the columns and then we have to use SET_SUBTOTAL method to display subtotals.

        "SORT
        DATA(lr_sort_column) = lo_salv_alv->get_sorts( )->add_sort( columnname = 'CHANGE'
                                                               "POSITION   =
                                                               "SEQUENCE   = IF_SALV_C_SORT=>SORT_UP
                                                               "SUBTOTAL   = IF_SALV_C_BOOL_SAP=>true
                                                               "GROUP      = IF_SALV_C_SORT=>GROUP_NONE
                                                               "OBLIGATORY = IF_SALV_C_BOOL_SAP=>FALSE
                                                               ).
        "SUBTOTALS
        lr_sort_column->set_subtotal( EXPORTING value = if_salv_c_bool_sap=>true ).

      CATCH cx_salv_existing cx_salv_not_found cx_salv_data_error . "#EC NO_HANDLER
    ENDTRY.

    "COLUMN SPECIFIC GROUPING----------------------------------------------------------------

    "Create Groups
    TRY.
        lo_salv_alv->get_functional_settings( )->get_specific_groups(:
                                                                )->add_specific_group( id   = 'AMOU' text = 'Amounts' ),
                                                                )->add_specific_group( id   = 'DATE' text = 'Dates' ),
                                                                )->add_specific_group( id   = 'NCHA'  text = 'Numerical Characters' ),
                                                                )->add_specific_group( id   = 'CHAR'  text = 'Character Fields' ).

      CATCH cx_salv_existing.                           "#EC NO_HANDLER
    ENDTRY.


    "Dynamic Assignment of Columns to Groups
    LOOP AT CAST cl_abap_structdescr( CAST cl_abap_tabledescr( cl_abap_tabledescr=>describe_by_data( <fs_table> ) )->get_table_line_type( ) )->components ASSIGNING FIELD-SYMBOL(<ls_components>).

      CASE <ls_components>-type_kind.

        WHEN cl_abap_structdescr=>typekind_date.

          TRY.
              CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( <ls_components>-name ) )->set_specific_group( id = 'DATE' ).
              CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( <ls_components>-name ) )->set_visible( abap_true ).
            CATCH cx_salv_not_found.
          ENDTRY.

        WHEN cl_abap_structdescr=>typekind_packed.

          TRY.
              CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( <ls_components>-name ) )->set_specific_group( id = 'AMOU' ).
              CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( <ls_components>-name ) )->set_visible( abap_true ).
            CATCH cx_salv_not_found.
          ENDTRY.

        WHEN cl_abap_structdescr=>typekind_num.

          TRY.
              CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( <ls_components>-name ) )->set_specific_group( id = 'NCHA' ).
              CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( <ls_components>-name ) )->set_visible( abap_true ).
            CATCH cx_salv_not_found.
          ENDTRY.

        WHEN cl_abap_structdescr=>typekind_char.

          TRY.
              CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( <ls_components>-name ) )->set_specific_group( id = 'CHAR' ).
              CAST cl_salv_column_table( lo_salv_alv->get_columns( )->get_column( <ls_components>-name ) )->set_visible( abap_true ).
            CATCH cx_salv_not_found.
          ENDTRY.

      ENDCASE.

    ENDLOOP.


  ENDMETHOD.

  METHOD display_settings_header.

    "Enable Multiple Selection in the ALV Layout and Enable Left Column for Selection
    lo_salv_alv->get_selections( )->set_selection_mode( if_salv_c_selection_mode=>row_column )."cl_salv_selections=>multiple

    "Change Display Settings to Stripped and Activate/deactivate horizontal and vertical lines
    lo_salv_alv->get_display_settings(:
                                      )->set_striped_pattern( abap_true ),
                                      )->set_horizontal_lines( abap_true ),
                                      )->set_vertical_lines( abap_true ).
    "Layout Settings
    lo_salv_alv->get_layout(:
                            )->set_key( value = VALUE salv_s_layout_key( report = syst-repid ) ),"Save the Layout Key.Unique key identifies the Differenet ALVs
                            )->set_default( abap_true )," Set usage of default layouts
                            )->set_save_restriction( if_salv_c_layout=>restrict_none ),"Remove Save layout Restriction
                            )->set_initial_layout( lv_layout )."Set Initial Layout.If Layout doesnt exist it will display the default


  ENDMETHOD.

  METHOD header_creation.

    IF lv_version EQ lcl_main_salv=>gui." ALV Header for Container

      lo_salv_alv->get_display_settings( :
          )->set_list_header_size( cl_salv_display_settings=>c_header_size_medium ),
          )->set_list_header( |The List Generated by { syst-uname  } at { syst-datum  DATE = USER } { syst-uzeit  TIME = USER }.Entries:{ lines( <fs_table> ) } | ).

    ELSEIF lv_version EQ lcl_main_salv=>fiori." ALV Header for Fiori Version

      lo_salv_alv->get_display_settings(:
      )->set_list_header_size( cl_salv_display_settings=>c_header_size_medium ),
      )->set_list_header( |Number of Retrieved Entries: { lines( <fs_table> ) } | ).

      me->header_creation_fiori( ).
    ENDIF.

  ENDMETHOD.

  METHOD header_creation_fiori.

    DATA(lo_header) = NEW cl_salv_form_layout_grid( ).

    "Information in Bold
    lo_header->create_label( row = 1 column = 1 )->set_text('ALV Report').

    "Information in tabular format
    lo_header->create_flow( row = 2 column = 1 )->create_text( text = |The List was Generated by User { syst-uname } at { syst-datum  DATE = USER } { syst-uzeit  TIME = USER } | ).

    "Set the top of list using the header for Online
    lo_salv_alv->set_top_of_list( lo_header ).

    "Set the top of list using the header for Print
    lo_salv_alv->set_top_of_list_print( lo_header ).

  ENDMETHOD.

  METHOD footer_creation.

    DATA(lo_footer) = NEW cl_salv_form_layout_grid( ).

    DATA(lo_f_label) = lo_footer->create_label( row = 1 column = 1 )  .
    lo_f_label->set_text( 'Footer').

    DATA(lo_f_flow) = lo_footer->create_flow( row = 2 column = 1 ).

    lo_f_flow->create_text( text = COND #( WHEN lv_data_source EQ lcl_main_salv=>database THEN |Displaying Details of Table |
                                           WHEN lv_data_source EQ lcl_main_salv=>excel   THEN  |Displaying Details of Excel File |
                                           ELSE |Footer Details | ) ).
    lo_salv_alv->set_end_of_list( lo_footer ).
    lo_salv_alv->set_end_of_list_print( lo_footer ).

  ENDMETHOD.

  METHOD toolbar_status.

    IF lv_status IS NOT INITIAL AND lv_version EQ lcl_main_salv=>fiori.

      TRY.
          lo_salv_alv->set_screen_status(
            pfstatus      = lv_status
            report        = syst-cprog
            set_functions = lo_salv_alv->c_functions_all ).
        CATCH cx_salv_method_not_supported cx_salv_object_not_found.

      ENDTRY.

    ELSE.

      lo_salv_alv->get_functions( )->set_all( if_salv_c_bool_sap=>true ).

      "Add Custom Buttons
      TRY.

          lo_salv_alv->get_functions(:
                               )->add_function( name = 'DETAILS'"Custom Button Details
                                                icon = |{ icon_overview }|
                                                text = 'Details'
                                                tooltip = 'Detail View'
                                                position = if_salv_c_function_position=>right_of_salv_functions ),
                               )->add_function( name = 'EDIT'"Custom Button Edit
                                                icon = |{ icon_operation }|
                                                text = 'Edit'
                                                tooltip = 'Edit ALV Fields'
                                                position = if_salv_c_function_position=>right_of_salv_functions ),
                               )->add_function( name = 'COLUMNS'"Custom Button Columns
                                                icon = |{ icon_businav_sysorgi }|
                                                text = ''
                                                tooltip = 'Show/Hide Empty Columns'
                                                position = if_salv_c_function_position=>right_of_salv_functions ),
                               )->add_function( name = 'DOCU' "Custom Button Documentation
                                                icon = |{ icon_message_information_small }|
                                                text = ''
                                                tooltip = 'End User Documentation'
                                                position = if_salv_c_function_position=>right_of_salv_functions ).


        CATCH cx_salv_existing cx_salv_wrong_call cx_salv_method_not_supported. "#EC NO_HANDLER
      ENDTRY.

      "Suppress the toolbar of the list output
      cl_abap_list_layout=>suppress_toolbar( ).

    ENDIF.

  ENDMETHOD.

  METHOD handle_gui_grid_events.

    IF lv_handle_gui_grid_events EQ abap_true.

      DATA(lo_gui_grid_event) = NEW lcl_event_handler( ).
      SET HANDLER lo_gui_grid_event->event_after_refresh FOR ALL INSTANCES.
      lo_salv_alv->refresh( ).

    ENDIF.

  ENDMETHOD.

  METHOD event_handling.

*Handler for Double Click Event and User Command(Button) and Hotspot Handling
    SET HANDLER: lcl_event_handler=>handle_double_click    FOR lo_salv_alv->get_event( ),
                 lcl_event_handler=>on_user_command        FOR lo_salv_alv->get_event( ),
                 lcl_event_handler=>handle_hotspot         FOR lo_salv_alv->get_event( ),
                 lcl_event_handler=>on_end_of_page         FOR lo_salv_alv->get_event( ),
                 lcl_event_handler=>on_top_of_page         FOR lo_salv_alv->get_event( ),
                 lcl_event_handler=>on_after_salv_function FOR lo_salv_alv->get_event( ).

*Set Desired Field Hotspot Enabled
    lcl_event_handler=>set_hotspot( EXPORTING im_alv = lo_salv_alv im_field = lv_hotspot_field ).

  ENDMETHOD.

  METHOD display_alv.

    lo_salv_alv->display( ).

    "----------------------------Force Container Generation------------------------*
    IF lv_version EQ lcl_main_salv=>gui.
      WRITE: space.
    ENDIF.

  ENDMETHOD.


ENDCLASS.

*----------------------------------------------------------------------*
*       CLASS lcl_utilities IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_utilities IMPLEMENTATION.

  METHOD upload_excel.

    DATA: lt_records TYPE solix_tab.

    cl_gui_frontend_services=>gui_upload(
      EXPORTING
        filename                = CONV #( im_filepath )
        filetype                = 'BIN'
      IMPORTING
        filelength              = DATA(lv_filelength)
        header                  = DATA(lv_headerxstring)
      CHANGING
        data_tab                = lt_records
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        not_supported_by_gui    = 17
        error_no_gui            = 18
        OTHERS                  = 19 ).

    IF syst-subrc IS NOT INITIAL.
      RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = | Error while Uploading Excel File |.
    ENDIF.

    CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
      EXPORTING
        input_length  = lv_filelength
      IMPORTING
        buffer        = lv_headerxstring
      TABLES
        binary_tab    = lt_records
      EXCEPTIONS
        failed        = 1
        error_message = 2
        OTHERS        = 3.

    IF syst-subrc IS NOT INITIAL.
      RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = | Error while Uploading Excel File |.
    ENDIF.

    TRY.
        DATA(lo_excel_ref) = NEW cl_fdt_xl_spreadsheet(
                                document_name = CONV #( im_filepath )
                                xdocument     = lv_headerxstring ) .
      CATCH cx_fdt_excel_core INTO DATA(ex_ref).
        RAISE EXCEPTION TYPE lcx_exception EXPORTING im_text = CONV #( ex_ref->get_text( ) ).
    ENDTRY.

    lo_excel_ref->if_fdt_doc_spreadsheet~get_worksheet_names( IMPORTING worksheet_names = DATA(t_worksheets) ).

    ex_table = lo_excel_ref->if_fdt_doc_spreadsheet~get_itab_from_worksheet( COND #(  WHEN im_sheet_name IS NOT INITIAL AND line_exists( t_worksheets[ table_line = im_sheet_name  ]  )
                                                                                      THEN VALUE #( t_worksheets[ table_line = im_sheet_name  ] OPTIONAL )
                                                                                      ELSE VALUE #( t_worksheets[ 1 ] OPTIONAL )  ) ).

  ENDMETHOD.

  METHOD get_structured_table_from_gen.

    TYPES: BEGIN OF ty_column_structure,
             component TYPE string,
             column    TYPE i,
           END OF ty_column_structure.

    DATA: t_column TYPE TABLE OF ty_column_structure,
          v_index  TYPE i,
          v_column TYPE i,
          ref_wa   TYPE REF TO data.

    FIELD-SYMBOLS: <fs_itab> TYPE ANY TABLE,
                   <fs_wa>   TYPE any.

    "CHECK IMPORTING TABLE IS NOT INITIAL
    CHECK im_table IS NOT INITIAL.

    "CREATE A DYNAMIC TABLE WITH THE SAME STRUCTURE AS TARGETED TABLE
    ASSIGN ex_table  TO <fs_itab>.

    "DATA REFERENCE
    CREATE DATA ref_wa LIKE LINE OF <fs_itab>.
    ASSIGN ref_wa->* TO <fs_wa>.

    IF im_map_by_structure EQ abap_false."GET STRUCTURE FROM TABLE ROW

      "GET THE COLUMN NAMES FROM THE SPECIFIED ROW(IMPORTING PARAMETER)
      REFRESH t_column.
      CLEAR:v_index.
      LOOP AT im_table ASSIGNING FIELD-SYMBOL(<s_tab>).
        ADD 1 TO v_index.

        IF v_index EQ im_structure_line."LOOP ONLY THE SPECIFIED STRUCTURE ROW
          CLEAR v_column.
          DO.
            ADD 1 TO v_column.
            ASSIGN COMPONENT v_column OF STRUCTURE <s_tab> TO FIELD-SYMBOL(<fs_any>).
            IF syst-subrc IS INITIAL.
              APPEND VALUE #( component =  <fs_any> column = v_column ) TO t_column.
            ELSE.
              EXIT.
            ENDIF.
          ENDDO.
          EXIT.
        ENDIF.

      ENDLOOP.

    ELSEIF im_map_by_structure EQ abap_true."GET STRUCTURE FROM TABLE COMPONENTS

      DATA(lo_type_def)   = CAST cl_abap_tabledescr( cl_abap_tabledescr=>describe_by_data( ex_table ) ).
      DATA(lo_struct_def) = CAST cl_abap_structdescr( lo_type_def->get_table_line_type( ) ).

      CLEAR: v_column.
      LOOP AT lo_struct_def->components ASSIGNING FIELD-SYMBOL(<fs_components>) WHERE type_kind NE cl_abap_typedescr=>typekind_table AND
                                                                                      type_kind NE cl_abap_typedescr=>typekind_struct1 AND
                                                                                      name NE lcl_main_salv=>lc_checkbox AND
                                                                                      name NE lcl_main_salv=>lc_icon_column.
        ADD 1 TO v_column.
        APPEND VALUE #( component =  <fs_components>-name column = v_column ) TO t_column.
      ENDLOOP.

    ENDIF.

    DELETE t_column WHERE component IS INITIAL.

    "PASS DATA TO TABLE
    CLEAR v_index.
    LOOP AT im_table ASSIGNING <s_tab>.
      ADD 1 TO v_index.

      IF v_index LT im_start_line.
        CONTINUE.
      ENDIF.

      "START FROM DATA LINE(IMPORTING PARAMETER)
      CLEAR <fs_wa>.
      LOOP AT t_column INTO DATA(s_column).

        "GETS THE FIELD OF THE TABLE TO BE MAPPED
        ASSIGN COMPONENT s_column-component OF STRUCTURE <fs_wa> TO FIELD-SYMBOL(<fs_any_tab>).
        IF syst-subrc IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        "GETS THE VALUE TO BE TRANSFERRED
        ASSIGN COMPONENT s_column-column OF STRUCTURE <s_tab> TO <fs_any>.
        IF syst-subrc IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        "CONVERT FIELD TO CHARACTER
        DATA(lr_elem) =  cl_abap_elemdescr=>describe_by_data( <fs_any_tab> ).
        IF lr_elem->type_kind EQ lr_elem->typekind_date."CONVERT DATE TO INTERNAL FORMAT

          <fs_any_tab> = lcl_utilities=>date_external_to_internal( CONV #( <fs_any> ) ) .

        ELSEIF lr_elem->type_kind EQ lr_elem->typekind_packed AND <fs_any>  CP '*E*'."CONVERT PACKED TO CHARACTER.E IS THE LAST NUMBER OF DECIMALS

          CALL FUNCTION 'C14W_NUMBER_CHAR_CONVERSION'
            EXPORTING
              i_float       = CONV f( <fs_any> )
            IMPORTING
              e_dec         = <fs_any_tab>
            EXCEPTIONS
              error_message = 1
              OTHERS        = 2.

        ELSEIF lr_elem->type_kind EQ lr_elem->typekind_packed AND <fs_any> CP '-*'."CONVERT PACKED TO CHARACTER
          <fs_any_tab> = |{  <fs_any>+1 }| && '-'.
        ELSE."PASS THE VALUE AS IS
          <fs_any_tab> = <fs_any> .
        ENDIF.

      ENDLOOP.

      "APPEND TO EXPORTING TABLE
      INSERT <fs_wa> INTO TABLE ex_table .

    ENDLOOP.

  ENDMETHOD.

  METHOD f4_salv.

    cv_layout = cl_salv_layout_service=>f4_layouts( s_key    = VALUE salv_s_layout_key( report = syst-repid )
                                                    restrict = if_salv_c_layout=>restrict_none  )-layout.

  ENDMETHOD.


  METHOD date_external_to_internal.

    DATA: lv_convert_date TYPE c LENGTH 10.

    CLEAR:lv_convert_date.
    lv_convert_date = im_date.

    "date format YYYY/MM/DD
    FIND REGEX '^\d{4}[/|-|.|-]\d{1,2}[/|-|.|-]\d{1,2}$' IN lv_convert_date.
    IF syst-subrc IS INITIAL.
      CALL FUNCTION '/SAPDMC/LSM_DATE_CONVERT'
        EXPORTING
          date_in             = lv_convert_date
          date_format_in      = 'DYMD'
          to_output_format    = ' '
          to_internal_format  = 'X'
        IMPORTING
          date_out            = re_date_internal
        EXCEPTIONS
          illegal_date        = 1
          illegal_date_format = 2
          no_user_date_format = 3
          error_message       = 4
          OTHERS              = 5.

    ELSE.

      " date format DD/MM/YYYY
      FIND REGEX '^\d{1,2}[/|-|.|-]\d{1,2}[/|-|.|-]\d{4}$' IN lv_convert_date.
      IF syst-subrc IS INITIAL.
        CALL FUNCTION '/SAPDMC/LSM_DATE_CONVERT'
          EXPORTING
            date_in             = lv_convert_date
            date_format_in      = 'DDMY'
            to_output_format    = ' '
            to_internal_format  = 'X'
          IMPORTING
            date_out            = re_date_internal
          EXCEPTIONS
            illegal_date        = 1
            illegal_date_format = 2
            no_user_date_format = 3
            error_message       = 4
            OTHERS              = 5.
      ELSE.
        re_date_internal = lv_convert_date.
      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD check_field_exists_in_table.

    SELECT SINGLE @abap_true
      FROM dd03l
      INTO @re_exists
      WHERE tabname   EQ @im_table
        AND fieldname EQ @im_field.

  ENDMETHOD.

  METHOD convert_to_internal_alpha.

    DATA:wf_data      TYPE REF TO data.

*   Determine the mask(Conversion Exit) and Output Length of the Field
    DATA(lv_edit_mask) = CAST cl_abap_elemdescr( cl_abap_typedescr=>describe_by_data( im_external ) )->edit_mask.
    DATA(lv_output_length) = CAST cl_abap_elemdescr( cl_abap_typedescr=>describe_by_data( im_external ) )->output_length.

    IF lv_edit_mask IS INITIAL."ALPHA ROUTINE DOES NO EXISTS
      re_internal = |{ im_external ALPHA = IN }|.
      RETURN.
    ENDIF.

    REPLACE '==' IN lv_edit_mask WITH space.
    CONDENSE lv_edit_mask NO-GAPS.

    CREATE DATA wf_data TYPE c LENGTH lv_output_length.
    IF wf_data IS BOUND.
      ASSIGN wf_data->* TO FIELD-SYMBOL(<fs_t>).
      IF <fs_t> IS NOT ASSIGNED.
        IF re_internal IS INITIAL.
          re_internal = im_external.
        ENDIF.
        EXIT.
      ENDIF.
    ELSE.
      IF re_internal IS INITIAL.
        re_internal = im_external.
      ENDIF.
      EXIT.
    ENDIF.

    CONCATENATE 'CONVERSION_EXIT_' lv_edit_mask '_INPUT' INTO DATA(lv_convexit).

    CALL FUNCTION lv_convexit
      EXPORTING
        input         = im_external
      IMPORTING
        output        = <fs_t>
      EXCEPTIONS
        error_message = 1
        OTHERS        = 2.

    IF syst-subrc IS NOT INITIAL.
      re_internal = im_external.
    ELSE.
      re_internal = <fs_t>.
    ENDIF.

  ENDMETHOD.

  METHOD dynamic_where_clause.

    IF im_field IS NOT INITIAL AND im_comp IS NOT INITIAL AND im_val IS NOT INITIAL.

      "CHECK FIELD EXISTS IN CURRENT TABLE
      DATA(lv_field_exists) = lcl_utilities=>check_field_exists_in_table( EXPORTING im_field = im_field im_table = im_table_name ).
      CHECK lv_field_exists EQ abap_true.

      "Create Variable based on field Type
      DATA:dref TYPE REF TO data.

      DATA(type) = im_table_name && '-' && im_field.
      DATA(lv_data_type) =  cl_abap_typedescr=>describe_by_name( type )->type_kind.

      IF lv_data_type EQ 'D'."DATE
        DATA(lv_internal) = lcl_utilities=>date_external_to_internal( im_val ).
      ELSE."OTHER DATA TYPE

        CREATE DATA dref TYPE (type).
        ASSIGN dref->* TO FIELD-SYMBOL(<fs_val>).

        IF <fs_val> IS ASSIGNED.
          <fs_val> = im_val.
          lv_internal = lcl_utilities=>convert_to_internal_alpha( <fs_val> ).
        ELSE.
          lv_internal = im_val.
        ENDIF.

      ENDIF.

      DATA(lt_condtab) = VALUE hrtb_cond( ( field = im_field opera = im_comp low = lv_internal ) ).

      CALL FUNCTION 'RH_DYNAMIC_WHERE_BUILD'
        EXPORTING
          dbtable         = im_table_name
        TABLES
          condtab         = lt_condtab
          where_clause    = re_select_clause
        EXCEPTIONS
          empty_condtab   = 1
          no_db_field     = 2
          unknown_db      = 3
          wrong_condition = 4
          error_message   = 5
          OTHERS          = 6.

    ENDIF.

  ENDMETHOD.

  METHOD open_dialog_excel.

    DATA: lt_file_table TYPE filetable,
          lv_return     TYPE i.

    CLEAR:lt_file_table.
    cl_gui_frontend_services=>file_open_dialog(
      EXPORTING
        window_title            = 'File System of Presentation Server'
        default_extension       = cl_gui_frontend_services=>filetype_excel
        file_filter             = 'All Files(*.*)|*.*|' && 'Excel Files (*.xlsx)|*.xlsx|' && 'Excel Files (*.xls)|*.xls|'
      CHANGING
        file_table              = lt_file_table
        rc                      = lv_return
      EXCEPTIONS
        file_open_dialog_failed = 1
        cntl_error              = 2
        error_no_gui            = 3
        OTHERS                  = 4 ).

    CHECK syst-subrc IS INITIAL AND lt_file_table IS NOT INITIAL.

    re_filepath =  VALUE #( lt_file_table[ 1 ]-filename OPTIONAL ).

  ENDMETHOD.


ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS lcl_salv_edit IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_salv_edit IMPLEMENTATION.

  METHOD get_control_internal.

    CHECK e_adapter_type IS REQUESTED OR e_control IS REQUESTED.

    IF  e_adapter_type IS REQUESTED.
      CLEAR e_adapter_type.
    ENDIF.

    IF  e_control IS REQUESTED.
      CLEAR e_control.
    ENDIF.

    DATA(lo_controller) = i_salv->r_controller.
    CHECK lo_controller IS BOUND.

    DATA(lo_adapter) = lo_controller->r_adapter.
    CHECK lo_adapter IS BOUND.

    IF e_adapter_type IS REQUESTED.
      e_adapter_type = lo_adapter->type.
    ENDIF.

    CHECK e_control IS REQUESTED.

    CASE lo_adapter->type.
      WHEN lo_adapter->if_salv_adapter~c_adapter_type_fullscreen.
        DATA(lo_fullscreen_adapter) = CAST cl_salv_fullscreen_adapter( lo_adapter ).
        e_control = lo_fullscreen_adapter->get_grid( ).

      WHEN lo_adapter->if_salv_adapter~c_adapter_type_grid.
        DATA(lo_grid_adapter) = CAST cl_salv_grid_adapter( lo_adapter ).
        e_control = lo_grid_adapter->get_grid( ).

      WHEN lo_adapter->if_salv_adapter~c_adapter_type_hierseq.

      WHEN lo_adapter->if_salv_adapter~c_adapter_type_list.
        DATA(lo_table_display_adapter) = CAST if_salv_table_display_adapter( lo_adapter ).
        e_control = lo_table_display_adapter->r_table.

      WHEN lo_adapter->if_salv_adapter~c_adapter_type_tree.
        DATA(lo_tree_adapter_base) = CAST cl_salv_tree_adapter_base( lo_adapter ).
        e_control = lo_tree_adapter_base->r_tree.

      WHEN lo_adapter->if_salv_adapter~c_adapter_type_append.

    ENDCASE.

  ENDMETHOD.                    "get_control_internal

  METHOD get_control_rtti.

    CHECK e_adapter_type IS REQUESTED OR e_control_rtti IS REQUESTED.

    IF  e_adapter_type IS REQUESTED.
      CLEAR e_adapter_type.
    ENDIF.

    IF  e_control_rtti IS REQUESTED.
      CLEAR e_control_rtti.
    ENDIF.

    get_control_internal( EXPORTING i_salv = i_salv IMPORTING e_adapter_type = DATA(lv_adapter_type) e_control = DATA(lo_control) ).

    IF e_adapter_type IS REQUESTED.
      e_adapter_type = lv_adapter_type.
    ENDIF.

    IF e_control_rtti IS REQUESTED.
      e_control_rtti = cl_abap_typedescr=>describe_by_object_ref( lo_control ).
    ENDIF.

  ENDMETHOD.                    "get_control_rtti

  METHOD get_control.

    CHECK r_control IS REQUESTED.
    get_control_internal( EXPORTING i_salv = i_salv IMPORTING e_control = r_control ).

  ENDMETHOD.                    "get_control

  METHOD set_editable.

    DATA(lo_grid) = CAST cl_gui_alv_grid( get_control( i_salv_table ) ).
    CHECK lo_grid IS BOUND.

    IF i_fieldname IS SUPPLIED AND i_fieldname IS NOT INITIAL.
      lo_grid->get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = DATA(lt_fieldcat) ).
      READ TABLE lt_fieldcat ASSIGNING FIELD-SYMBOL(<fs_fieldcat>) WITH KEY fieldname = i_fieldname.
      CHECK syst-subrc IS INITIAL.
      <fs_fieldcat>-edit = i_editable.
      lo_grid->set_frontend_fieldcatalog( lt_fieldcat ).
    ELSE.
      lo_grid->get_frontend_layout( IMPORTING es_layout = DATA(ls_layout) ).
      ls_layout-edit = i_editable.
      lo_grid->set_frontend_layout( EXPORTING is_layout = ls_layout ).
    ENDIF.

    CHECK i_refresh = abap_true.
    i_salv_table->refresh( ).
  ENDMETHOD.                    "set_editable

ENDCLASS.                    "lcl_salv_edit IMPLEMENTATION

*&----------------------------------------------------------------------*
*& CLASS lcl_event_handler IMPLEMENTATION
*&----------------------------------------------------------------------*
CLASS lcl_event_handler IMPLEMENTATION.

  METHOD on_function_selected.

    CASE fcode.
      WHEN 'BTN_CLOSE'.
        LEAVE LIST-PROCESSING.
      WHEN 'F1'.
        MESSAGE fcode TYPE cl_cms_common=>con_msg_typ_i DISPLAY LIKE cl_cms_common=>con_msg_typ_s.
      WHEN 'F2'.
        MESSAGE fcode TYPE cl_cms_common=>con_msg_typ_i DISPLAY LIKE cl_cms_common=>con_msg_typ_s.
    ENDCASE.

  ENDMETHOD.

  METHOD on_after_salv_function.

    CHECK e_salv_function EQ '&ILT' OR  " Apply Filter
          e_salv_function EQ '&ILD'.    " Delete Filter

    "STATIC FILTERS.CHECK FOR FILTER CHANGE OR DELETION.IF THE FILTER
    "IS NOT THE SAME AS WHAT WE HAVE APPLIED INITIALLY THEN PUT BACK THE FILTER

    TRY.

        DATA(lo_filters) = go_lcl_main->lo_salv_alv->get_filters( ).
        DATA(lo_filter)  = lo_filters->get_filter( 'FILTER' ).

*      filter still there, check for the values
        DATA(lt_selopt) = lo_filter->get( ).
        IF lt_selopt NE go_lcl_main->t_filter_selopt.

          TRY.
              lo_filters->add_filter(
                EXPORTING
                  columnname = 'CHANGE'
                  sign       = 'I'
                  option     = 'EQ'
                  low        = 'VALUE').

            CATCH cx_salv_not_found cx_salv_data_error  cx_salv_existing. "#EC NO_HANDLER

          ENDTRY.

        ENDIF.

*     when Filter is removed, this exception would be raised.
*     set it back
      CATCH cx_salv_not_found.

        TRY.
            lo_filters->add_filter(
              EXPORTING
                columnname = 'CHANGE'
                sign       = 'I'
                option     = 'EQ'
                low        = 'VALUE').

          CATCH cx_salv_not_found cx_salv_data_error  cx_salv_existing. "#EC NO_HANDLER

        ENDTRY.

    ENDTRY.

  ENDMETHOD.

  METHOD event_after_refresh.

    CHECK handler_added EQ abap_false.
    SET HANDLER me->on_toolbar FOR sender.

    SET HANDLER me->event_after_refresh  FOR ALL INSTANCES ACTIVATION space.

    sender->set_delay_change_selection(
      EXPORTING
        time   =  100    " Time in Milliseconds
      EXCEPTIONS
        error  = 1
        OTHERS = 2 ).

    sender->register_delayed_event(
      EXPORTING
        i_event_id =  sender->mc_evt_delayed_change_select
      EXCEPTIONS
        error      = 1
        OTHERS     = 2 ).


    sender->get_frontend_fieldcatalog(
      IMPORTING
        et_fieldcatalog = DATA(fcat) ).    " Field Catalog

    "setting editable field
    ASSIGN fcat[ fieldname = p_editf ] TO FIELD-SYMBOL(<fcat>).
    IF syst-subrc IS INITIAL.
      <fcat>-edit = abap_true.
    ENDIF.

    sender->set_frontend_fieldcatalog( it_fieldcatalog = fcat ).
    sender->register_edit_event(
      EXPORTING
        i_event_id = sender->mc_evt_modified    " Event ID
      EXCEPTIONS
        error      = 1
        OTHERS     = 2 ).


    sender->set_ready_for_input( i_ready_for_input = 1 ).

    handler_added = abap_true.
    sender->refresh_table_display( ).

  ENDMETHOD.

  METHOD on_toolbar.

    DATA: lo_grid    TYPE REF TO cl_gui_alv_grid,
          ls_layout  TYPE lvc_s_layo,
          mt_toolbar TYPE ttb_button,
          ls_toolbar LIKE LINE OF mt_toolbar.

    "Toolbar Seperator
    APPEND VALUE #( function   = cl_gui_alv_grid=>mc_fc_separator
                    butn_type  = 3 ) TO e_object->mt_toolbar.

    "Toolbar Button APPEND ROW
    APPEND VALUE #( function   = cl_gui_alv_grid=>mc_fc_loc_append_row
                    quickinfo  = 'Append Row'
                    icon       = icon_create
                    disabled   = space ) TO e_object->mt_toolbar.

    "Toolbar Button INSERT ROW
    APPEND VALUE #( function   = cl_gui_alv_grid=>mc_fc_loc_insert_row
                    quickinfo  = 'Insert Row'
                    icon       = icon_insert_row
                    disabled   = space ) TO e_object->mt_toolbar.


*... Toolbar Button DELETE ROW
    CLEAR ls_toolbar.
    ls_toolbar-function   = cl_gui_alv_grid=>mc_fc_loc_delete_row.
    ls_toolbar-quickinfo  = 'Delete Row'.
    ls_toolbar-icon       = icon_delete_row.
    ls_toolbar-disabled   = space.
    APPEND ls_toolbar TO mt_toolbar.

*... Toolbar Button COPY ROW
    CLEAR ls_toolbar.
    ls_toolbar-function   = cl_gui_alv_grid=>mc_fc_loc_copy_row.
    ls_toolbar-quickinfo  =  'Copy Row'.
    ls_toolbar-icon       = icon_copy_object.
    ls_toolbar-disabled   = space.
    APPEND ls_toolbar TO mt_toolbar.

*... Toolbar Button UNDO
    CLEAR ls_toolbar.
    ls_toolbar-function   = cl_gui_alv_grid=>mc_fc_loc_undo.
    ls_toolbar-quickinfo  = 'Undo'.
    ls_toolbar-icon       = icon_system_undo.
    ls_toolbar-disabled   = space.
    APPEND ls_toolbar TO mt_toolbar.

*... Toolbar Separator
    CLEAR ls_toolbar.
    ls_toolbar-function   = cl_gui_alv_grid=>mc_fc_separator.
    ls_toolbar-butn_type  = 3.
    APPEND ls_toolbar TO mt_toolbar.


  ENDMETHOD.                    "on_toolbar

  METHOD display_details_of_selection.

    DATA(lt_selected_rows) = go_lcl_main->lo_salv_alv->get_selections( )->get_selected_rows( ).

    TRY.

        DATA(lv_row_index) = lt_selected_rows[ 1 ].
        ASSIGN <fs_table>[ lv_row_index ] TO FIELD-SYMBOL(<ls_data>).

        IF <ls_data> IS ASSIGNED AND lo_struct_def IS NOT BOUND.
          " Using RTTS to get the runtime type information of the internal table
          DATA(lo_type_def)  = CAST cl_abap_tabledescr( cl_abap_tabledescr=>describe_by_data( <fs_table> ) ).
          lo_struct_def = CAST cl_abap_structdescr( lo_type_def->get_table_line_type( ) ).
          "WHEN TYPE IS DEEP,YOU CAN USE GET_INCLUDED_VIEW TO GET ALL THE COMPONENTS.
*        DATA(LT_COMPONENTS_C) = lo_struct_def->get_included_view( ).
        ENDIF.

        "Populate LT_DETAILS Table with the Values from the Row Selected
        DATA(lt_details) = VALUE se16n_selfields_t_in( ).
        LOOP AT lo_struct_def->components INTO DATA(wa_components).

          "Check if Column is Displayed in ALV
          TRY.
              IF NOT go_lcl_main->lo_salv_alv->get_columns( )->get_column( wa_components-name )->is_visible( ).
                CONTINUE.
              ENDIF.
            CATCH cx_salv_not_found.                    "#EC NO_HANDLER
          ENDTRY.

          "FIELD VALUE AS PREVIEWED AND UNCONVERTED
          ASSIGN COMPONENT wa_components-name OF STRUCTURE <ls_data> TO FIELD-SYMBOL(<fs_value>).

          "Check that <fs_value> is not structure or table
          DATA(lo_type) = cl_abap_typedescr=>describe_by_data( <fs_value> ).
          IF lo_type->type_kind EQ cl_abap_typedescr=>typekind_struct1 OR lo_type->type_kind EQ cl_abap_typedescr=>typekind_table .
            CONTINUE.
          ENDIF.

          IF <fs_value> IS ASSIGNED.
            DATA(value_out) = |{ <fs_value> ALPHA = OUT   }|.
            DATA(value_in) =  |{ <fs_value> }|.
          ENDIF.

          "TECHNICAL FIELD NAME
          DATA(fieldname) = wa_components-name.

          "FIELD NAME DESCRIPTION
          "Get Data Dictionary Type of the Component
          DATA(lo_element_def) = CAST cl_abap_elemdescr( lo_struct_def->get_component_type( wa_components-name ) ).

          IF NOT lo_element_def->is_ddic_type( ) ."Field is not Dictionary Data Type
            DATA(scrtext_l) = wa_components-name.
          ELSE."Field is Dictionary Data Type

            DATA(lw_field_info) = lo_element_def->get_ddic_field( ).
            SELECT SINGLE scrtext_l
               FROM  dd04t
               INTO  @scrtext_l
               WHERE rollname EQ @lw_field_info-rollname AND
                     ddlanguage  EQ @syst-langu.

            IF scrtext_l IS INITIAL."If no Text Exist take Heading Information

              SELECT SINGLE reptext
               FROM  dd04t
               INTO  @scrtext_l
               WHERE rollname EQ @lw_field_info-rollname AND
                     ddlanguage  EQ @syst-langu.

            ENDIF.

          ENDIF.

          APPEND VALUE #( low = value_out  low_noconv = value_in  scrtext_l = scrtext_l  fieldname = fieldname  ) TO lt_details.

        ENDLOOP.

        CALL FUNCTION 'TSWUSL_SHOW_DETAIL'
          TABLES
            it_selfields  = lt_details
          EXCEPTIONS
            error_message = 1
            OTHERS        = 2.

      CATCH cx_sy_itab_line_not_found.
        MESSAGE 'Please Select a Row to Display Details' TYPE cl_cms_common=>con_msg_typ_i.
    ENDTRY.

  ENDMETHOD.

  METHOD display_documentation.

    "GOTO TRANSACTION SE61 AND CREATE DIALOG TEXT TO DISPLAY
    CALL FUNCTION 'POPUP_DISPLAY_TEXT'
      EXPORTING
        language       = syst-langu
        popup_title    = 'Documetation'
        start_column   = 10
        start_row      = 3
        text_object    = 'ALLGEM_DATEN'
      EXCEPTIONS
        text_not_found = 1
        error_message  = 2
        OTHERS         = 3.

    IF syst-subrc <> 0.
      MESSAGE 'Error while Reading Document Object' TYPE cl_cms_common=>con_msg_typ_i DISPLAY LIKE cl_cms_common=>con_msg_typ_e.
    ENDIF.

  ENDMETHOD.

  METHOD show_hide_empty_columns.

    "Find Empty Columns of ALV
    REFRESH:lt_empty_columns.
    LOOP AT go_lcl_main->lo_salv_alv->get_columns( )->get( ) ASSIGNING FIELD-SYMBOL(<column>).

      DATA(lv_empty_indicator) = abap_true.
      LOOP AT <fs_table> ASSIGNING FIELD-SYMBOL(<fs_structure>).
        ASSIGN COMPONENT <column>-columnname OF STRUCTURE <fs_structure> TO  FIELD-SYMBOL(<fs_value>).
        IF <fs_value> IS ASSIGNED.
          IF <fs_value> IS INITIAL."EMPTY VALUE
            CONTINUE.
          ELSE."FILLED CELL
            lv_empty_indicator = abap_false.
            EXIT.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF lv_empty_indicator = abap_true.
        APPEND <column>-columnname TO lt_empty_columns.
      ENDIF.

    ENDLOOP.


    IF lv_show_hide EQ abap_false.

      lv_show_hide = abap_true.

      "Hide Empty Columns
      LOOP AT lt_empty_columns ASSIGNING FIELD-SYMBOL(<fs_empty_column>).

        TRY.
            DATA(o_column_hide) = CAST cl_salv_column_table( go_lcl_main->lo_salv_alv->get_columns( )->get_column( <fs_empty_column>-column_name ) ).
            o_column_hide->set_visible( if_salv_c_bool_sap=>false ).
          CATCH cx_salv_not_found.                      "#EC NO_HANDLER
        ENDTRY.
      ENDLOOP.

    ELSE.

      lv_show_hide = abap_false.

      "Show Empty Columns
      LOOP AT lt_empty_columns ASSIGNING FIELD-SYMBOL(<fs_empty_column1>).

        TRY.
            DATA(o_column_show) = CAST cl_salv_column_table( go_lcl_main->lo_salv_alv->get_columns( )->get_column( <fs_empty_column1>-column_name ) ).
            o_column_show->set_visible( if_salv_c_bool_sap=>true ).
          CATCH cx_salv_not_found.                      "#EC NO_HANDLER
        ENDTRY.
      ENDLOOP.

    ENDIF.

  ENDMETHOD.

  METHOD on_top_of_page.

  ENDMETHOD.

  METHOD on_end_of_page.

  ENDMETHOD.

  METHOD handle_double_click.

    CASE column.
      WHEN '&&MARK&&'.
        lcl_event_handler=>display_details_of_selection( ).
      WHEN OTHERS.

        "Flip Toggle TRUE-FALSE
        gv_editable = xsdbool( gv_editable EQ abap_false ).

        "OPEN EDIT FOR SPECIFIC COLUMN THAT THE USER DOUBLE CLICKED
        lcl_salv_edit=>set_editable( i_fieldname = column i_salv_table = go_lcl_main->lo_salv_alv i_editable = gv_editable ).

    ENDCASE.

  ENDMETHOD. "handle_double_click

  METHOD on_user_command.

    CASE e_salv_function.

      WHEN 'EDIT'."BUTTON THAT THE USER PRESSES.

        "Flip Toggle TRUE-FALSE
        gv_editable = xsdbool( gv_editable EQ abap_false ).

        "OPEN ALV EDIT FOR WHOLE TABLE
        lcl_salv_edit=>set_editable( i_salv_table = go_lcl_main->lo_salv_alv i_editable = gv_editable ).

      WHEN 'COLUMNS'.

        lcl_event_handler=>show_hide_empty_columns( ).

      WHEN 'DETAILS'.

        lcl_event_handler=>display_details_of_selection( ).

      WHEN 'DOCU'.

        lcl_event_handler=>display_documentation( ).

      WHEN OTHERS.

    ENDCASE.

  ENDMETHOD. "on_user_command

  METHOD set_hotspot." SET HOTSPOT CLICK FOR A SPECIFIC TABLE COLUMNS

    "Get Column
    TRY.
        DATA(lo_hotspot_column) = CAST cl_salv_column_table( go_lcl_main->lo_salv_alv->get_columns( )->get_column( im_field ) )."CHANGE HOTSPOT COLUMN DEPENDING ON TABLE
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

    "Set Hotspot
    TRY.
        lo_hotspot_column->set_cell_type( EXPORTING value = if_salv_c_cell_type=>hotspot ).
      CATCH cx_salv_data_error cx_sy_ref_is_initial .   "#EC NO_HANDLER
    ENDTRY.

  ENDMETHOD.   "SET_HOTSPOT

  METHOD handle_hotspot." HANDLE THE CLICK ON A SPECIFIC HOTSPOT

    "Get the line of the table that the user Clicked
    ASSIGN <fs_table>[ row ]  TO FIELD-SYMBOL(<fs_structure>).
    CHECK syst-subrc IS INITIAL.

    ASSIGN COMPONENT column OF STRUCTURE <fs_structure> TO FIELD-SYMBOL(<fs_field_value>).
    CHECK syst-subrc IS INITIAL.

    CASE column.

      WHEN lcl_main_salv=>lc_checkbox .

        IF <fs_field_value> IS INITIAL.
          <fs_field_value> = abap_true.
        ELSE.
          CLEAR <fs_field_value>.
        ENDIF.

        go_lcl_main->lo_salv_alv->refresh( ).

      WHEN OTHERS.

        "Get the Desired Value
        IF <fs_field_value> IS ASSIGNED .
          DATA(popup) = cl_demo_output=>new( mode = cl_demo_output=>text_mode ).
          popup->write_text( |You have clicked on column { column } of row { row } | ).
          popup->write_text( |The value is { <fs_field_value> } | ).
          popup->display( ).
        ENDIF.

    ENDCASE.


  ENDMETHOD.  "HANDLE_HOTSPOT

ENDCLASS."lcl_event_handler IMPLEMENTATION
*----------------------------------------------------------------------*
* CLASS lcl_sel_screen IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_sel_screen IMPLEMENTATION.

  METHOD 	get_instance.

    IF lo_instance IS NOT BOUND.
      lo_instance = NEW #( ).
    ENDIF.

    re_instance = lo_instance.

  ENDMETHOD.

  METHOD screen_initialization.

    t_color = VALUE #( ( color = 1  color_descr = 'Blue'       )
                     ( color = 2  color_descr = 'Light Grey' )
                     ( color = 3  color_descr = 'Yellow'     )
                     ( color = 4  color_descr = 'Light Blue' )
                     ( color = 5  color_descr = 'Green'      )
                     ( color = 6  color_descr = 'Red'        )
                     ( color = 7  color_descr = 'Orange'     ) ).

    title0    = 'Table Selection'.
    title05   = 'Excel Options'.
    title1    = 'ALV General Options'.
    title2    = 'GUI Version Options'.
    title3    = 'Fiori Version Options'.
    title4    = 'Dynamic Where Clause'.

    t_db      = icon_database_table && 'Database Table'.
    t_file    = icon_xls && 'Table from Excel File'.
    t_excel   = icon_open_folder && 'Excel Filepath'.
    t_sheet   = icon_xls && 'Sheet Name'.
    t_hdesc   = 'Bases on First Row of Excel Table'.
    t_head    = 'Dynamic Column Name'.
    t_status  = icon_wd_toolbar_caption && 'Custom GUI Status'.
    t_layout  = icon_alv_variants && 'Layout'.
    t_names   = icon_wd_input_field && 'Display Technical Names'.
    t_hits    = 'Maximum no. of hits'.
    t_icon    = icon_status_open && 'Include Icon Column'.
    t_popup   = icon_wd_window && 'ALV on Popup'.
    t_check   = icon_checkbox && 'Include Checkbox Column'.
    t_hotsp   = icon_simple_field && 'Hotspot Field'.
    t_doc     = icon_wd_view_set_t_layout_90 && 'ALV at Bottom'.
    t_split   = icon_wd_view_set_t_layout_270 && 'ALV Splitted'.
    t_cont    = icon_context_menu && 'ALV with Context Menu'.
    t_table   = icon_table_settings && 'Table'.
    t_stand   = icon_wd_view_container &&'ALV Standard Position'.
    t_dial    = icon_wd_window && 'ALV in Dialog Box'.
    t_r1      = icon_sap_gui_session && 'GUI Version'.
    t_r2      = icon_wd_web_appl_project && 'Fiori Version'.
    t_colh    = icon_color && 'Hotspot Color'.
    t_coll    = icon_color && 'Line Color'.
    t_event   = icon_wd_toolbar && 'GUI Grid Toolbar'.

    syst-title = gc_report_heading.


  ENDMETHOD.

  METHOD screen_pbo.

    LOOP AT SCREEN INTO DATA(ls_screen).

      ls_screen-request = COND #( WHEN ls_screen-name EQ 'T_HITS' THEN '1' ).

      ls_screen-display_3d = COND #( WHEN ls_screen-name EQ 'T_HITS' THEN '1' ).

      ls_screen-active = COND #( WHEN r1   EQ abap_true AND  ls_screen-group1 EQ 'ID2' THEN  /accgo/if_cck_dpqs_constants=>gc_screen_input_visible
                                 WHEN r2   EQ abap_true AND  ls_screen-group1 EQ 'ID1' THEN  /accgo/if_cck_dpqs_constants=>gc_screen_input_visible
                                 WHEN db   EQ abap_true AND  ls_screen-group1 EQ 'ID3' THEN  /accgo/if_cck_dpqs_constants=>gc_screen_input_visible
                                 WHEN file EQ abap_true AND  ls_screen-group1 EQ 'ID4' THEN  /accgo/if_cck_dpqs_constants=>gc_screen_input_visible ).

      MODIFY SCREEN FROM ls_screen.

    ENDLOOP.

    IF p_table IS NOT INITIAL.

      SELECT SINGLE FROM dd02t
        FIELDS ddtext
        WHERE tabname EQ @p_table AND
              ddlanguage EQ @syst-langu
        INTO @t_descr.

      IF syst-subrc NE /accgo/if_cas_constants=>gc_sysubrc_success.
        CLEAR:t_descr.
      ENDIF.

    ENDIF.

    IF p_hotsp IS NOT INITIAL AND p_table IS NOT INITIAL.

      DATA(lv_field_exists) = lcl_utilities=>check_field_exists_in_table( EXPORTING im_field = CONV #( p_hotsp ) im_table = p_table ).

      IF lv_field_exists EQ abap_true.

        DATA(lv_data_element) = CAST cl_abap_elemdescr( cl_abap_typedescr=>describe_by_name( |{ p_table CASE = UPPER }-{ p_hotsp CASE = UPPER }| ) )->get_ddic_field( )-rollname.

        SELECT SINGLE FROM dd04t
          FIELDS ddtext
          WHERE rollname   EQ @lv_data_element
            AND ddlanguage EQ @syst-langu
          INTO @h_descr.

      ELSE.

        CLEAR: h_descr.

      ENDIF.

    ENDIF.

    IF p_coll IS NOT INITIAL.

      TRY.
          t_descl = t_color[ color = p_coll ]-color_descr.
        CATCH cx_sy_itab_line_not_found.
      ENDTRY.

    ELSE.
      CLEAR:t_descl.
    ENDIF.

    IF p_colh IS NOT INITIAL.

      TRY.
          t_desch = t_color[ color = p_colh ]-color_descr.
        CATCH cx_sy_itab_line_not_found.
      ENDTRY.
    ELSE.
      CLEAR:t_desch.
    ENDIF.

    IF p_layout IS NOT INITIAL.

      DATA(lt_layout) = cl_salv_layout_service=>get_layouts( EXPORTING s_key =  VALUE salv_s_layout_key( report = syst-repid ) ).
      TRY.
          t_ldescr  = lt_layout[ layout = p_layout ]-text.
        CATCH cx_sy_itab_line_not_found.
      ENDTRY.

    ELSE.
      CLEAR:t_ldescr.
    ENDIF.

  ENDMETHOD.

  METHOD color_f4.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield      = 'COLOR'
        dynpprog      = syst-repid
        dynpnr        = syst-dynnr
        dynprofield   = to_upper( im_fieldname )
        window_title  = 'Table Fields'
        value_org     = 'S'
      TABLES
        value_tab     = t_color
      EXCEPTIONS
        error_message = 1
        OTHERS        = 2.

  ENDMETHOD.

  METHOD fields_f4.

    DATA(lt_fields) = VALUE smt_wd_t_field_description( ).
    DATA(lo_struct_def) = CAST cl_abap_structdescr( cl_abap_typedescr=>describe_by_name( p_table ) ).

    LOOP AT lo_struct_def->components ASSIGNING FIELD-SYMBOL(<fs_line>).

      "GET DATA ELEMENT OF THE COMPONENT
      DATA(lo_element_def) = CAST cl_abap_elemdescr( lo_struct_def->get_component_type( <fs_line>-name ) ).
      DATA(lw_field_info) = lo_element_def->get_ddic_field( ).

      "GET DESCRIPTION OF THE DATA ELEMENT
      SELECT SINGLE scrtext_l
      FROM  dd04t
      INTO  @DATA(scrtext_l)
      WHERE rollname EQ @lw_field_info-rollname AND
            ddlanguage  EQ @syst-langu.

      APPEND VALUE #( field = <fs_line>-name description = scrtext_l ) TO lt_fields.

    ENDLOOP.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield      = 'FIELD'
        dynpprog      = syst-repid
        dynpnr        = syst-dynnr
        dynprofield   = to_upper( im_fieldname )
        window_title  = 'Table Fields'
        value_org     = 'S'
      TABLES
        value_tab     = lt_fields
      EXCEPTIONS
        error_message = 1
        OTHERS        = 2.

  ENDMETHOD.

  METHOD screen_pai.

    CASE sscrfields-ucomm.
      WHEN 'BUT1'.

    ENDCASE.

  ENDMETHOD.

ENDCLASS.

*&----------------------------------------------------------------------*
*&CLASS LCX_EXCEPTION IMPLEMENTATION
*&----------------------------------------------------------------------*
CLASS lcx_exception IMPLEMENTATION.

  METHOD constructor.

    super->constructor( textid = CONV #( im_textid )
                        previous = CONV #( im_previous ) ) ##OPERATOR[REFERENCE].

    mv_message = COND #( WHEN im_text IS SUPPLIED AND im_text IS NOT INITIAL THEN im_text ).

  ENDMETHOD.

  METHOD get_text.

    result = super->get_text( ).

    IF me->mv_message IS NOT INITIAL.
      result = COND #( WHEN result IS INITIAL THEN  me->mv_message
                       WHEN result IS NOT INITIAL THEN |{ result }-{ me->mv_message } | ).
    ENDIF.

  ENDMETHOD.

  METHOD get_longtext.

    result = super->get_longtext( ).

    IF me->mv_message IS NOT INITIAL.
      result = COND #( WHEN result IS INITIAL THEN  me->mv_message
                       WHEN result IS NOT INITIAL THEN |{ result }-{ me->mv_message } | ).
    ENDIF.

  ENDMETHOD.

ENDCLASS.
