************************************************************************
*   Program name:                                                      *
*   Description :                                                      *
*                                                                      *
*   Created   by: GDRAKOS DVALOUXIS                                    *
*                                                                      *
************************************************************************
REPORT export_texts.

TABLES:stxh.

CLASS: lcx_texts DEFINITION DEFERRED,
       lcl_texts DEFINITION DEFERRED.

*&---------------------------------------------------------------------*
*& CLASS DEFINITIONS
*&---------------------------------------------------------------------*
CLASS lcx_texts DEFINITION INHERITING FROM cx_static_check.

  PUBLIC SECTION.

    METHODS: constructor IMPORTING text TYPE string,
      get_text REDEFINITION.

  PRIVATE SECTION.

    DATA: local_text TYPE string.

ENDCLASS.

CLASS lcl_texts DEFINITION CREATE PUBLIC.


  PUBLIC SECTION.

    METHODS: get_data IMPORTING so_object TYPE STANDARD TABLE
                                so_tdname TYPE STANDARD TABLE
                                so_tdid   TYPE STANDARD TABLE
                                so_spras  TYPE STANDARD TABLE
                      RAISING   lcx_texts,

      download_texts  IMPORTING im_filename                TYPE file_table-filename
                                im_custom_header_structure TYPE any OPTIONAL
                                im_field_labels_as_header  TYPE abap_bool DEFAULT space
                                im_components_header       TYPE abap_bool DEFAULT space
                                sheet_name                 TYPE string DEFAULT 'Sheet1'
                      RAISING   lcx_texts.

  PROTECTED SECTION.


  PRIVATE SECTION.

    TYPES: BEGIN OF t_texts_extract,
             tdobject   TYPE tdobject,
             tdname     TYPE tdobname,
             tdid       TYPE tdid,
             tdspras    TYPE spras,
             tdtitle    TYPE tdtitle,
             tdtxtlines TYPE tdtxtlines,
             text       TYPE string,
           END OF t_texts_extract .

    DATA:lt_texts         TYPE STANDARD TABLE OF stxh INITIAL SIZE 0,
         lt_texts_extract TYPE STANDARD TABLE OF t_texts_extract INITIAL SIZE 0.

    CLASS-METHODS:move_corresponding_ignore_init IMPORTING i_str_source TYPE any
                                                 CHANGING  c_str_dest   TYPE any.

    METHODS: process_texts IMPORTING im_texts LIKE lt_texts.

ENDCLASS.

*&---------------------------------------------------------------------*
*& SELECTION SCREEN DESIGN
*&---------------------------------------------------------------------*

SELECTION-SCREEN: BEGIN OF BLOCK b02 WITH FRAME TITLE title1.
SELECTION-SCREEN COMMENT 1(26) t_file FOR FIELD p_file.
PARAMETERS : p_file TYPE file_table-filename OBLIGATORY.
SELECTION-SCREEN: END OF BLOCK b02 .

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE title2.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(26) t_obj FOR FIELD s_obj.
SELECT-OPTIONS: s_obj FOR stxh-tdobject OBLIGATORY.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(26) t_tdname FOR FIELD s_tdname.
SELECT-OPTIONS: s_tdname FOR stxh-tdname OBLIGATORY.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(26) t_tdid FOR FIELD s_tdid.
SELECT-OPTIONS: s_tdid FOR stxh-tdid OBLIGATORY.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(26) t_spras FOR FIELD s_spras.
SELECT-OPTIONS: s_spras FOR stxh-tdspras OBLIGATORY.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b1.

*&---------------------------------------------------------------------*
*& INITIALIZATION OF SELECTION SCREEN ELEMENTS
*&---------------------------------------------------------------------*
INITIALIZATION.
  PERFORM screen_initialization.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  PERFORM get_export_filepath CHANGING p_file.

*&---------------------------------------------------------------------*
*& EXECUTABLE CODE
*&---------------------------------------------------------------------*
START-OF-SELECTION.

  DATA(lo_texts) = NEW lcl_texts( ).

  TRY.
      lo_texts->get_data( EXPORTING so_object = s_obj[] so_spras = s_spras[] so_tdid = s_tdid[] so_tdname = s_tdname[] ).
      lo_texts->download_texts( EXPORTING im_filename = p_file  im_field_labels_as_header = abap_true ).
    CATCH lcx_texts INTO DATA(lo_exception).
      MESSAGE lo_exception->get_text( ) TYPE cl_cms_common=>con_msg_typ_i DISPLAY LIKE cl_cms_common=>con_msg_typ_e.
  ENDTRY.

END-OF-SELECTION.

*&---------------------------------------------------------------------*
*& SUBROUTINE CREATION
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Form SCREEN INITIALIZATION
*&---------------------------------------------------------------------*
FORM screen_initialization.

  title1  = 'Export Filepath'.
  title2  = 'Texts Selection'.

  t_file   = 'Filepath'.
  t_obj    = icon_object_list &&  'Text Object'.
  t_tdname = icon_text_field && 'Text Name'.
  t_tdid   = icon_text_ina && 'Text ID'.
  t_spras  = icon_eu && 'Language'.

ENDFORM.

FORM get_export_filepath CHANGING lp_file.

  DATA: filename    TYPE string,
        path        TYPE string,
        fullpath    TYPE string,
        user_action TYPE i.

  cl_gui_frontend_services=>file_save_dialog(
          EXPORTING
            window_title              = 'File System of Presentation Server'
            default_extension         = cl_gui_frontend_services=>filetype_excel
            prompt_on_overwrite       = abap_true
            default_file_name         = 'Texts.XLSX'
            file_filter               = 'All Files(*.*)|*.*|' && 'Excel Files (*.xlsx)|*.xlsx|' &&'Excel Files (*.xls)|*.xls|'
          CHANGING
            filename                  = filename          " File Name to Save
            path                      = path              " Path to File
            fullpath                  = fullpath          " Path + File Name
            user_action               = user_action       " User Action (C Class Const ACTION_OK, ACTION_OVERWRITE etc)
          EXCEPTIONS
            cntl_error                = 1                 " Control error
            error_no_gui              = 2                 " No GUI available
            not_supported_by_gui      = 3                 " GUI does not support this
            invalid_default_file_name = 4                 " Invalid default file name
            OTHERS                    = 5 ).

  IF sy-subrc NE 0 OR user_action NE cl_gui_frontend_services=>action_ok.
    EXIT.
  ENDIF.

  lp_file = fullpath.

ENDFORM.

*&---------------------------------------------------------------------*
*& CLASS IMPLEMENTATIONS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Class LCX_TEXTS
*&---------------------------------------------------------------------*
CLASS lcx_texts IMPLEMENTATION.

  METHOD constructor.

    super->constructor( textid = CONV #( text ) ).
    local_text = text.

  ENDMETHOD.

  METHOD get_text.

    result = me->local_text.

  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*& Class LCL_TEXTS
*&---------------------------------------------------------------------*
CLASS lcl_texts IMPLEMENTATION.


  METHOD get_data.

    SELECT FROM stxh
      FIELDS stxh~*
      WHERE tdobject IN  @so_object
        AND tdname   IN  @so_tdname
        AND tdid     IN  @so_tdid
        AND tdspras  IN  @so_spras
        INTO CORRESPONDING FIELDS OF TABLE @lt_texts.

    IF sy-subrc EQ 4.
      RAISE EXCEPTION TYPE lcx_texts EXPORTING text = 'No Texts Found for the Specified Criteria'.
    ENDIF.

    me->process_texts( EXPORTING im_texts = lt_texts ).

  ENDMETHOD.

  METHOD process_texts.

    DATA:lt_lines TYPE TABLE OF  tline.

    LOOP AT im_texts ASSIGNING FIELD-SYMBOL(<fs_line>).

      APPEND INITIAL LINE TO me->lt_texts_extract ASSIGNING FIELD-SYMBOL(<fs_extract_line>).

      me->move_corresponding_ignore_init( EXPORTING i_str_source = <fs_line> CHANGING  c_str_dest = <fs_extract_line> ).

      CLEAR: lt_lines.
      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          client                  = sy-mandt
          id                      = <fs_line>-tdid
          language                = <fs_line>-tdspras
          name                    = <fs_line>-tdname
          object                  = <fs_line>-tdobject
        TABLES
          lines                   = lt_lines
        EXCEPTIONS
          id                      = 1
          language                = 2
          name                    = 3
          not_found               = 4
          object                  = 5
          reference_check         = 6
          wrong_access_to_archive = 7
          OTHERS                  = 8.

      IF sy-subrc EQ 0.

        LOOP AT lt_lines ASSIGNING FIELD-SYMBOL(<fs_lines>).

          REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>horizontal_tab IN <fs_lines>-tdline WITH space .
          CONDENSE <fs_lines>-tdline.
          CONCATENATE <fs_extract_line>-text <fs_lines>-tdline INTO <fs_extract_line>-text SEPARATED BY space.

        ENDLOOP.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD download_texts.

    TYPES: BEGIN OF ty_comp_detail,
             name  TYPE abap_compname,
             descr TYPE scrtext_m,
           END OF ty_comp_detail.

    DATA:lv_row         TYPE i,
         lv_column      TYPE i VALUE 1,
         ls_comp_detail TYPE ty_comp_detail.

    FIELD-SYMBOLS: <fs_t>     TYPE ANY TABLE,
                   <fs_value> TYPE any.

    TRY.

        DATA(xlsx_handling) = cl_ehfnd_xlsx=>get_instance( ).
        DATA(xlsx_document) = xlsx_handling->create_doc( ).
        DATA(xlsx_sheets) = xlsx_document->get_sheets( ).
        DATA(first_xlsx_sheet) = xlsx_document->get_sheet_by_id( xlsx_sheets[ 1 ]-sheet_id ).

      CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed INTO DATA(lo_exception_xml).
        RAISE EXCEPTION TYPE lcx_texts EXPORTING text = lo_exception_xml->get_text( ).
    ENDTRY.

    ASSIGN me->lt_texts_extract TO <fs_t>.

    DATA(lo_type_def)   = CAST cl_abap_tabledescr( cl_abap_tabledescr=>describe_by_data( me->lt_texts_extract ) ).
    DATA(lo_struct_def) = CAST cl_abap_structdescr( lo_type_def->get_table_line_type( ) ).
    DATA(lt_components) = lo_struct_def->components.

    "BUILD EXCEL HEADER LINE
    IF im_custom_header_structure IS NOT INITIAL.

      lv_row = 2.
      DATA(lv_component_number) = 1.

      DO.
        ASSIGN COMPONENT lv_component_number OF STRUCTURE im_custom_header_structure TO <fs_value>.
        IF sy-subrc EQ 0.
          first_xlsx_sheet->set_cell_content( iv_row = 1 iv_column = lv_column iv_value = <fs_value> ).
          lv_column = lv_column + 1.
          lv_component_number = lv_component_number + 1.
        ELSE.
          EXIT.
        ENDIF.
      ENDDO.

    ELSEIF im_field_labels_as_header EQ abap_true.

      lv_row = 2.

      LOOP AT lt_components INTO DATA(wa_components).

        DATA(lo_element_def) = CAST cl_abap_elemdescr( lo_struct_def->get_component_type( wa_components-name ) ).

        IF NOT lo_element_def->is_ddic_type( ) ."Field is not Dictionary Data Type

          ls_comp_detail-descr = wa_components-name.

        ELSE."Field is Dictionary Data Type

          DATA(lw_field_info) = lo_element_def->get_ddic_field( ).

          SELECT SINGLE scrtext_l
                         FROM  dd04t
                         INTO  @ls_comp_detail-descr
                         WHERE rollname EQ @lw_field_info-rollname AND
                               ddlanguage  EQ @sy-langu.

          IF sy-subrc NE 0."If no Text Exist take Heading Information

            SELECT SINGLE reptext
             FROM  dd04t
             INTO  @ls_comp_detail-descr
             WHERE rollname EQ @lw_field_info-rollname AND
                   ddlanguage  EQ @sy-langu.

          ENDIF.

          IF ls_comp_detail-descr IS INITIAL.
            ls_comp_detail-descr = wa_components-name.
          ENDIF.

        ENDIF.

        first_xlsx_sheet->set_cell_content( iv_row = 1 iv_column = lv_column iv_value = ls_comp_detail-descr ).
        lv_column = lv_column + 1.

      ENDLOOP.

    ELSEIF im_components_header EQ abap_true.

      lv_row = 2.

      LOOP AT lt_components INTO DATA(component).
        first_xlsx_sheet->set_cell_content( iv_row = 1 iv_column = lv_column iv_value = component-name ).
        lv_column = lv_column + 1.
      ENDLOOP.

    ELSE.

      lv_row = 1.

    ENDIF.

    "EXCEL ROWS
    CLEAR lv_column.
    TRY.
        LOOP AT me->lt_texts_extract ASSIGNING FIELD-SYMBOL(<fs_table>).

          lv_column = 1.
          LOOP AT lt_components INTO component.
            ASSIGN COMPONENT component-name OF STRUCTURE <fs_table> TO FIELD-SYMBOL(<columnvalue>).
            first_xlsx_sheet->set_cell_content( iv_row = lv_row iv_column = lv_column iv_value = <columnvalue> ).
            lv_column += 1.
          ENDLOOP.

          lv_row += 1.

        ENDLOOP.

        DATA(filecontent) = xlsx_document->save( ).

      CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed  INTO lo_exception_xml.
        RAISE EXCEPTION TYPE lcx_texts EXPORTING text = lo_exception_xml->get_text( ).
    ENDTRY.


    cl_scp_change_db=>xstr_to_xtab( EXPORTING im_xstring = filecontent
                                    IMPORTING ex_xtab    = DATA(filecontenttab) ).

    cl_gui_frontend_services=>gui_download(
          EXPORTING
            bin_filesize              = xstrlen( filecontent )
            filename                  = |{ im_filename }|
            filetype                  = 'BIN'
            confirm_overwrite         = abap_true
          IMPORTING
            filelength                = DATA(bytestransferred)
          CHANGING
            data_tab                  = filecontenttab
          EXCEPTIONS
            file_write_error          = 1
            no_batch                  = 2
            gui_refuse_filetransfer   = 3
            invalid_type              = 4
            no_authority              = 5
            unknown_error             = 6
            header_not_allowed        = 7
            separator_not_allowed     = 8
            filesize_not_allowed      = 9
            header_too_long           = 10
            dp_error_create           = 11
            dp_error_send             = 12
            dp_error_write            = 13
            unknown_dp_error          = 14
            access_denied             = 15
            dp_out_of_memory          = 16
            disk_full                 = 17
            dp_timeout                = 18
            file_not_found            = 19
            dataprovider_exception    = 20
            control_flush_error       = 21
            not_supported_by_gui      = 22
            error_no_gui              = 23
            OTHERS                    = 24 ).

    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE lcx_texts EXPORTING text = 'Error Downloading Texts'.
    ENDIF.

  ENDMETHOD.

  METHOD move_corresponding_ignore_init.

    DATA(l_rcl_abap_structdescr) = CAST cl_abap_structdescr( cl_abap_typedescr=>describe_by_data( i_str_source ) ).

    LOOP AT l_rcl_abap_structdescr->components ASSIGNING FIELD-SYMBOL(<fs_str_component>).

      ASSIGN COMPONENT <fs_str_component>-name OF STRUCTURE c_str_dest TO FIELD-SYMBOL(<fs_dest_field>).

      IF sy-subrc EQ /accgo/if_cas_constants=>gc_sysubrc_success.

        ASSIGN COMPONENT <fs_str_component>-name OF STRUCTURE i_str_source TO FIELD-SYMBOL(<fs_source_field>).

        IF sy-subrc EQ /accgo/if_cas_constants=>gc_sysubrc_success  AND
           <fs_source_field> IS NOT INITIAL.

          <fs_dest_field> = <fs_source_field>.

        ENDIF.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.
