************************************************************************
*   Program name: z_dynamic_conversion                                 *
*   Description :                                                      *
*                                                                      *
*   Created   by: GDRAKOS DVALOUXIS                                    *
*                                                                      *
************************************************************************
REPORT z_dynamic_conversion.

CLASS lcl_convertion_class DEFINITION CREATE PUBLIC FINAL.

  PUBLIC SECTION.

    CLASS-METHODS:

      alpha_conversion_in IMPORTING VALUE(iv_input)  TYPE any
                          EXPORTING VALUE(ev_output) TYPE any,

      alpha_conversion_out IMPORTING VALUE(iv_input)  TYPE any
                           EXPORTING VALUE(ev_output) TYPE any.

ENDCLASS.

START-OF-SELECTION.

  DATA(vbeln) = CONV vbeln('12345').

  lcl_convertion_class=>alpha_conversion_in( EXPORTING iv_input  = vbeln
                                             IMPORTING ev_output = vbeln ).

  lcl_convertion_class=>alpha_conversion_out( EXPORTING iv_input  = vbeln
                                              IMPORTING ev_output = vbeln ).

CLASS lcl_convertion_class IMPLEMENTATION.

  METHOD alpha_conversion_in.

    "Set initial output value to input value. This allows to exit in failure conditions.
    ev_output = iv_input.

    DATA(lo_elem) = CAST cl_abap_elemdescr( cl_abap_elemdescr=>describe_by_data( iv_input ) ).

    "If the data has no DDIC structure, exit
    IF NOT lo_elem->is_ddic_type( ).
      RETURN.
    ENDIF.

    DATA(ls_dfies) = lo_elem->get_ddic_field( ).

    "If DDIC structure has no conversion exit, exit.
    IF ls_dfies-convexit IS INITIAL.
      RETURN.
    ENDIF.

    "ALPHA Conversion for Input
    DATA(function_conversion_in) = to_upper( condense( |CONVERSION_EXIT_{ ls_dfies-convexit }_INPUT| ) ).

    TRY.

        CALL FUNCTION function_conversion_in
          EXPORTING
            input  = iv_input
          IMPORTING
            output = ev_output.

      CATCH cx_sy_dyn_call_illegal_type.
    ENDTRY.

  ENDMETHOD.

  METHOD alpha_conversion_out.

    "Set initial output value to input value. This allows to exit in failure conditions.
    ev_output = iv_input.

    DATA(lo_elem) = CAST cl_abap_elemdescr( cl_abap_elemdescr=>describe_by_data( iv_input ) ).

    "If the data has no DDIC structure, exit
    IF NOT lo_elem->is_ddic_type( ).
      RETURN.
    ENDIF.

    DATA(ls_dfies) = lo_elem->get_ddic_field( sy-langu ).

    "If DDIC structure has no conversion exit, exit.
    IF ls_dfies-convexit IS INITIAL.
      RETURN.
    ENDIF.

    "ALPHA Conversion for Output
    DATA(function_conversion_out) = to_upper( condense( |CONVERSION_EXIT_{ ls_dfies-convexit }_OUTPUT| ) ).

    TRY.

        CALL FUNCTION function_conversion_out
          EXPORTING
            input  = iv_input
          IMPORTING
            output = ev_output.

      CATCH cx_sy_dyn_call_illegal_type.
    ENDTRY.

  ENDMETHOD.

ENDCLASS.
